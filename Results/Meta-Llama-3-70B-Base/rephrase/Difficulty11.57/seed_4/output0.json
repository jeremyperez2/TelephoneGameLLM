{
    "adjacency_matrix": [
        [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0
        ]
    ],
    "prompt_init": [
        "You will receive a text. Your task is to rephrase this text without modifying its meaning. Just output your new text, nothing else. Here is the text:"
    ],
    "prompt_update": [
        "You will receive a text. Your task is to rephrase this text without modifying its meaning. Just output your new text, nothing else. Here is the text:"
    ],
    "personality_list": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
    ],
    "format_prompt": [
        ""
    ],
    "initial_story": "having the potential for high speed, high throughput, and low energy cost,optical neural networks (onns) have emerged as a promising candidate foraccelerating deep learning tasks. in conventional onns, light amplitudes aremodulated at the input and detected at the output. however, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. to address this issue, in this paper, we propose aframework called oplixnet to compress the areas of onns by modulating inputimage data into the amplitudes and phase parts of light signals. the input andoutput parts of the onns are redesigned to make full use of both amplitude andphase information. moreover, mutual learning across different onn structures isintroduced to maintain the accuracy. experimental results demonstrate that theproposed framework significantly reduces the areas of onns with the accuracywithin an acceptable range. for instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (fcnn) and 74.88% area isreduced with a 2.38% accuracy decrease on resnet-32. ",
    "stories": [
        [
            "Optical neural networks have the potential to offer high speed, high throughput, and low energy cost, making them a promising candidate for accelerating deep learning tasks. However, conventional ONNs only modulate the light amplitudes at the input and detect the output. The light phases are still ignored in these structures, even though they can also carry information for computing.\nIn this paper, we propose a framework called Oplixnet to compress the areas of ONNs by modulating the input image data into the amplitudes and phase parts of light signals. The input and output parts of the ONNs are redesigned to make full use of both amplitude and phase information. Moreover, mutual learning across different ONN structures is introduced to maintain the accuracy.\nExperimental results demonstrate that the proposed framework significantly reduces the areas of ONNs with the accuracy within an acceptable range. For instance, 75.03% area is reduced with a 0.33% accuracy decrease on fully connected neural network (FCNN) and 74.88% area is reduced with a 2.38% accuracy decrease on ResNet-32."
        ],
        [
            "Optical neural networks (ONNs) have the potential to offer high speed, high throughput, and low energy cost, making them a promising candidate for accelerating deep learning tasks. However, conventional ONNs only modulate the light amplitudes at the input and detect the output. The light phases are still ignored in these structures, even though they can also carry information for computing.\nIn this paper, we propose a framework called Oplixnet to compress the areas of ONNs by modulating the input image data into the amplitudes and phase parts of light signals. The input and output parts of the ONNs are redesigned to make full use of both amplitude and phase information. Moreover, mutual learning across different ONN structures is introduced to maintain the accuracy.\nExperimental results demonstrate that the proposed framework significantly reduces the areas of ONNs with the accuracy within an acceptable range. For instance, 75.03% area is reduced with a 0.33% accuracy decrease on fully connected neural network (FCNN) and 74.88% area is reduced with a 2.38% accuracy decrease on ResNet-32."
        ],
        [
            "Optical neural networks (ONNs) are a promising technology for accelerating deep learning tasks due to their potential for high speed, high throughput, and low energy cost. However, conventional ONNs only modulate the light amplitudes at the input and detect the output, while ignoring the light phases that can also carry information for computing.\nIn this paper, we propose a framework called Oplixnet to compress the areas of ONNs by modulating the input image data into the amplitudes and phase parts of light signals. The input and output parts of the ONNs are redesigned to make full use of both amplitude and phase information. Moreover, mutual learning across different ONN structures is introduced to maintain the accuracy.\nExperimental results demonstrate that the proposed framework significantly reduces the areas of ONNs with the accuracy within an acceptable range. For instance, 75.03% area is reduced with a 0.33% accuracy decrease on fully connected neural network (FCNN) and 74.88% area is reduced with a 2.38% accuracy decrease on ResNet-32."
        ],
        [
            "Optical neural networks (ONNs) are a technology that shows promise for accelerating deep learning tasks due to their potential for high speed, high throughput, and low energy cost. However, traditional ONNs only modulate the light amplitudes at the input and detect the output, while ignoring the light phases that can also carry information for computing.\nIn this paper, we propose a framework called Oplixnet that compresses the areas of ONNs by modulating the input image data into the amplitudes and phase parts of light signals. The input and output parts of the ONNs are redesigned to make full use of both amplitude and phase information. Furthermore, mutual learning across different ONN structures is introduced to maintain the accuracy.\nExperimental results show that the proposed framework significantly reduces the areas of ONNs while maintaining the accuracy within an acceptable range. For instance, 75.03% of the area is reduced with a 0.33% decrease in accuracy on a fully connected neural network (FCNN), and 74.88% of the area is reduced with a 2.38% decrease in accuracy on ResNet-32."
        ],
        [
            "Optical neural networks (ONNs) are a technology that shows promise for accelerating deep learning tasks due to their potential for high speed, high throughput, and low energy cost. However, traditional ONNs only modulate the light amplitudes at the input and detect the output, while ignoring the light phases that can also carry information for computing.\nIn this paper, we propose a framework called Oplixnet that compresses the areas of ONNs by modulating the input image data into the amplitudes and phase parts of light signals. The input and output parts of the ONNs are redesigned to make full use of both amplitude and phase information. Furthermore, mutual learning across different ONN structures is introduced to maintain the accuracy.\nExperimental results show that the proposed framework significantly reduces the areas of ONNs while maintaining the accuracy within an acceptable range. For instance, 75.03% of the area is reduced with a 0.33% decrease in accuracy on a fully connected neural network (FCNN), and 74.88% of the area is reduced with a 2.38% decrease in accuracy on ResNet-32."
        ],
        [
            "Optical neural networks (ONNs) are a promising technology for accelerating deep learning tasks due to their high speed, high throughput, and low energy cost. However, traditional ONNs only modulate light amplitudes at the input and detect the output, ignoring the light phases that can carry information for computing.\nIn this paper, we propose a framework called Oplixnet that compresses the areas of ONNs by modulating the input image data into the amplitudes and phase parts of light signals. The input and output parts of the ONNs are redesigned to make full use of both amplitude and phase information. Moreover, mutual learning across different ONN structures is introduced to maintain accuracy.\nExperimental results show that the proposed framework significantly reduces the areas of ONNs while maintaining accuracy within an acceptable range. For instance, 75.03% of the area is reduced with a 0.33% decrease in accuracy on a fully connected neural network (FCNN), and 74.88% of the area is reduced with a 2.38% decrease in accuracy on ResNet-32."
        ],
        [
            "Optical neural networks (ONNs) are a promising technology for accelerating deep learning tasks due to their high speed, high throughput, and low energy cost. However, traditional ONNs only modulate light amplitudes at the input and detect the output, ignoring the light phases that can carry information for computing.\nIn this paper, we propose a framework called Oplixnet that compresses the areas of ONNs by modulating the input image data into the amplitudes and phase parts of light signals. The input and output parts of the ONNs are redesigned to make full use of both amplitude and phase information. Moreover, mutual learning across different ONN structures is introduced to maintain accuracy.\nExperimental results show that the proposed framework significantly reduces the areas of ONNs while maintaining accuracy within an acceptable range. For instance, 75.03% of the area is reduced with a 0.33% decrease in accuracy on a fully connected neural network (FCNN), and 74.88% of the area is reduced with a 2.38% decrease in accuracy on ResNet-32."
        ],
        [
            "Optical neural networks (ONNs) are an emerging technology for performing deep learning tasks due to their high speed, high throughput, and low energy consumption. However, conventional ONNs only modulate light amplitudes at the input and detect the output, ignoring the light phases that can carry information for computing.\nIn this work, we propose a framework called Oplixnet that compresses the areas of ONNs by modulating the input image data into the amplitudes and phase parts of light signals. The input and output parts of the ONNs are redesigned to make full use of both amplitude and phase information. Furthermore, mutual learning across different ONN structures is introduced to maintain accuracy.\nExperimental results show that the proposed framework significantly reduces the areas of ONNs while maintaining accuracy within an acceptable range. For instance, 75.03% of the area is reduced with a 0.33% decrease in accuracy on a fully connected neural network (FCNN), and 74.88% of the area is reduced with a 2.38% decrease in accuracy on ResNet-32."
        ],
        [
            "Optical neural networks (ONNs) are a new kind of technology used to perform deep learning tasks because of their high speed, high throughput and low energy consumption. Conventional ONNs modulate light amplitudes at the input and detect the output, but they ignore the light phases that can carry information for computing.\nIn this work, we suggest a new framework called Oplixnet that compresses the areas of ONNs by modulating the input image data into the amplitudes and phase parts of light signals. The input and output parts of the ONNs are redesigned to make full use of both amplitude and phase information. We also suggest mutual learning across different ONN structures to maintain accuracy.\nOur experiments show that the new framework significantly reduces the areas of ONNs while maintaining accuracy within an acceptable range. For example, 75.03% of the area is reduced with a 0.33% decrease in accuracy on a fully connected neural network (FCNN), and 74.88% of the area is reduced with a 2.38% decrease in accuracy on ResNet-32."
        ],
        [
            "Optical neural networks (ONNs) are a type of technology used to carry out deep learning tasks because of their high speed, high throughput and low energy consumption. Conventional ONNs change light amplitudes at the input and detect the output, but they ignore the light phases that can carry information for computing.\nIn this work, we suggest a new structure called Oplixnet that compresses the areas of ONNs by changing the input image data into the amplitude and phase parts of light signals. The input and output parts of the ONNs are redesigned to make full use of both amplitude and phase information. We also suggest mutual learning across different ONN structures to maintain accuracy.\nOur experiments show that the new structure significantly reduces the areas of ONNs while maintaining accuracy within an acceptable range. For example, 75.03% of the area is reduced with a 0.33% decrease in accuracy on a fully connected neural network (FCNN), and 74.88% of the area is reduced with a 2.38% decrease in accuracy on ResNet-32."
        ],
        [
            "Optical neural networks (ONNs) are a type of technology used to carry out deep learning tasks because of their high speed, high throughput and low energy consumption. Conventional ONNs change light amplitudes at the input and detect the output, but they ignore the light phases that can carry information for computing.\nIn this work, we suggest a new structure called Oplixnet that compresses the areas of ONNs by changing the input image data into the amplitude and phase parts of light signals. The input and output parts of the ONNs are redesigned to make full use of both amplitude and phase information. We also suggest mutual learning across different ONN structures to maintain accuracy.\nOur experiments show that the new structure significantly reduces the areas of ONNs while maintaining accuracy within an acceptable range. For example, 75.03% of the area is reduced with a 0.33% decrease in accuracy on a fully connected neural network (FCNN), and 74.88% of the area is reduced with a 2.38% decrease in accuracy on ResNet-32."
        ],
        [
            "Optical Neural Networks (ONNs) are a type of technology used to perform deep learning tasks because of their high speed, high throughput, and low energy consumption. Conventional ONNs modify the amplitudes of light signals at the input and detect the output, but they ignore the phases of light signals, which can carry information for computing.\nIn this work, we propose a new structure called Oplixnet that reduces the area of ONNs by converting the input image data into the amplitude and phase parts of light signals. The input and output parts of the ONNs are redesigned to make full use of both amplitude and phase information. We also propose mutual learning across different ONN structures to maintain accuracy.\nOur experiments show that the new structure significantly reduces the area of ONNs while maintaining accuracy within an acceptable range. For example, 75.03% of the area is reduced with a 0.33% decrease in accuracy on a fully connected neural network (FCNN), and 74.88% of the area is reduced with a 2.38% decrease in accuracy on ResNet-32."
        ],
        [
            "Optical neural networks (ONNs) are a type of technology used to perform deep learning tasks because of their high speed, high throughput, and low energy consumption. Conventional ONNs modify the amplitudes of light signals at the input and detect the output, but they ignore the phases of light signals, which can carry information for computing.\nIn this work, we propose a new structure called Oplixnet that reduces the area of ONNs by converting the input image data into the amplitude and phase parts of light signals. The input and output parts of the ONNs are redesigned to make full use of both amplitude and phase information. We also propose mutual learning across different ONN structures to maintain accuracy.\nOur experiments show that the new structure significantly reduces the area of ONNs while maintaining accuracy within an acceptable range. For example, 75.03% of the area is reduced with a 0.33% decrease in accuracy on a fully connected neural network (FCNN), and 74.88% of the area is reduced with a 2.38% decrease in accuracy on ResNet-32."
        ],
        [
            "A new type of technology called Optical Neural Networks (ONNs) has been developed to perform deep learning tasks at high speeds with low energy consumption. Unlike conventional ONNs that only modify the amplitudes of light signals at the input and detect the output, the proposed Oplixnet structure makes use of both amplitude and phase information by converting the input image data into the amplitude and phase parts of light signals. Additionally, a mutual learning approach is used to maintain accuracy across different ONN structures. The results of our experiments show that the Oplixnet structure significantly reduces the area of ONNs while maintaining accuracy within an acceptable range, with 75.03% of the area reduced and a 0.33% decrease in accuracy on a fully connected neural network (FCNN) and 74.88% of the area reduced and a 2.38% decrease in accuracy on ResNet-32."
        ],
        [
            "We have developed a new technology called Optical Neural Networks (ONNs), which is capable of performing deep learning tasks at high speeds with low energy consumption. Unlike conventional ONNs that only modify the amplitudes of light signals at the input and detect the output, our proposed Oplixnet structure makes use of both amplitude and phase information by converting the input image data into the amplitude and phase parts of light signals. To maintain accuracy across different ONN structures, we use a mutual learning approach. Our experiments show that the Oplixnet structure significantly reduces the area of ONNs while maintaining accuracy within an acceptable range, with 75.03% of the area reduced and a 0.33% decrease in accuracy on a fully connected neural network (FCNN) and 74.88% of the area reduced and a 2.38% decrease in accuracy on ResNet-32."
        ],
        [
            "We have created a new technology called Optical Neural Networks (ONNs) that can perform deep learning tasks quickly and efficiently. Our unique Oplixnet design uses both amplitude and phase information by converting image data into light signals with amplitude and phase parts. To ensure accuracy across different ONN structures, we use a mutual learning approach. Our experiments show that the Oplixnet structure significantly reduces the size of ONNs while maintaining accuracy, with 75.03% of the area reduced and a 0.33% decrease in accuracy on a fully connected neural network (FCNN) and 74.88% of the area reduced and a 2.38% decrease in accuracy on ResNet-32."
        ],
        [
            "We have created a new technology called Optical Neural Networks (ONNs) that can perform deep learning tasks quickly and efficiently. Our unique Oplixnet design uses both amplitude and phase information by converting image data into light signals with amplitude and phase parts. To ensure accuracy across different ONN structures, we use a mutual learning approach. Our experiments show that the Oplixnet structure significantly reduces the size of ONNs while maintaining accuracy, with 75.03% of the area reduced and a 0.33% decrease in accuracy on a fully connected neural network (FCNN) and 74.88% of the area reduced and a 2.38% decrease in accuracy on ResNet-32."
        ],
        [
            "We have developed a new technology called Optical Neural Networks (ONNs), which enables us to carry out deep learning tasks quickly and efficiently. Our innovative Oplixnet design uses both amplitude and phase information by converting image data into light signals with amplitude and phase components. To ensure accuracy across different ONN structures, we employ a mutual learning approach. Our experiments demonstrate that the Oplixnet structure significantly reduces the size of ONNs while maintaining accuracy, with 75.03% of the area reduced and a 0.33% decrease in accuracy on a fully connected neural network (FCNN) and 74.88% of the area reduced and a 2.38% decrease in accuracy on ResNet-32."
        ],
        [
            "We have developed a new technology called Optical Neural Networks (ONNs), which enables us to carry out deep learning tasks quickly and efficiently. Our innovative Oplixnet design uses both amplitude and phase information by converting image data into light signals with amplitude and phase components. To ensure accuracy across different ONN structures, we employ a mutual learning approach. Our experiments demonstrate that the Oplixnet structure significantly reduces the size of ONNs while maintaining accuracy, with 75.03% of the area reduced and a 0.33% decrease in accuracy on a fully connected neural network (FCNN) and 74.88% of the area reduced and a 2.38% decrease in accuracy on ResNet-32."
        ],
        [
            "A new technology has been developed by us called Optical Neural Networks (ONNs) that can be used to execute deep learning tasks in a fast and efficient manner. Our Oplixnet design utilizes both amplitude and phase information by converting image data into light signals with amplitude and phase components. To guarantee accuracy across various ONN structures, we use a mutual learning technique. Our experiments have shown that the Oplixnet structure significantly reduces the size of ONNs while maintaining accuracy, with 75.03% of the area reduced and a 0.33% decrease in accuracy on a fully connected neural network (FCNN) and 74.88% of the area reduced and a 2.38% decrease in accuracy on ResNet-32."
        ],
        [
            "We have developed a new technology called Optical Neural Networks (ONNs) that can be used to execute deep learning tasks quickly and efficiently. Our Oplixnet design uses both amplitude and phase information by converting image data into light signals with amplitude and phase components. To ensure accuracy across different ONN structures, we use a mutual learning technique. Our experiments show that the Oplixnet structure significantly reduces the size of ONNs while maintaining accuracy, with 75.03% of the area reduced and a 0.33% decrease in accuracy on a fully connected neural network (FCNN) and 74.88% of the area reduced and a 2.38% decrease in accuracy on ResNet-32."
        ],
        [
            "We have created a new technology named Optical Neural Networks (ONNs) that can be employed to perform deep learning tasks rapidly and efficiently. Our Oplixnet model utilizes both amplitude and phase information by converting image data into light signals with amplitude and phase components. To maintain accuracy across diverse ONN structures, we employ a mutual learning approach. Our experiments demonstrate that the Oplixnet structure significantly reduces the size of ONNs while preserving accuracy, with a reduction of 75.03% in area and a decrease of 0.33% in accuracy on a fully connected neural network (FCNN), and a reduction of 74.88% in area and a decrease of 2.38% in accuracy on ResNet-32."
        ],
        [
            "We have developed a novel technology called Optical Neural Networks (ONNs) that can be used for performing deep learning tasks quickly and efficiently. Our Oplixnet model utilizes both amplitude and phase information by converting image data into light signals with amplitude and phase components. To ensure accuracy across various ONN structures, we use a mutual learning approach. Our experiments show that the Oplixnet structure significantly reduces the size of ONNs while maintaining accuracy, with a reduction of 75.03% in area and a decrease of 0.33% in accuracy on a fully connected neural network (FCNN), and a reduction of 74.88% in area and a decrease of 2.38% in accuracy on ResNet-32."
        ],
        [
            "A new technology called Optical Neural Networks (ONNs) has been developed that can perform deep learning tasks efficiently and quickly. The Oplixnet model uses both amplitude and phase information by converting image data into light signals with amplitude and phase components. To ensure accuracy across different ONN structures, mutual learning is used. Experiments show that the Oplixnet structure significantly reduces the size of ONNs while maintaining accuracy, with a reduction of 75.03% in area and a decrease of 0.33% in accuracy on a fully connected neural network (FCNN), and a reduction of 74.88% in area and a decrease of 2.38% in accuracy on ResNet-32."
        ],
        [
            "Optical Neural Networks (ONNs) are a new technology that can perform deep learning tasks efficiently and quickly. The Oplixnet model uses both amplitude and phase information by converting image data into light signals with amplitude and phase components. To ensure accuracy across different ONN structures, mutual learning is used. Experiments show that the Oplixnet structure significantly reduces the size of ONNs while maintaining accuracy, with a reduction of 75.03% in area and a decrease of 0.33% in accuracy on a fully connected neural network (FCNN), and a reduction of 74.88% in area and a decrease of 2.38% in accuracy on ResNet-32."
        ],
        [
            "Optical neural networks (ONNs) are a cutting-edge technology that can perform deep learning tasks with great efficiency and speed. The Oplixnet model is able to utilize both amplitude and phase information by converting image data into light signals that possess both amplitude and phase components. To ensure accuracy across different ONN structures, mutual learning is employed. Experiments have shown that the Oplixnet structure can significantly reduce the size of ONNs while maintaining accuracy, with a reduction of 75.03% in area and a decrease of 0.33% in accuracy on a fully connected neural network (FCNN), and a reduction of 74.88% in area and a decrease of 2.38% in accuracy on ResNet-32."
        ],
        [
            "Optical neural networks (ONNs) are a cutting-edge technology that can perform deep learning tasks with great efficiency and speed. The Oplixnet model is able to utilize both amplitude and phase information by converting image data into light signals that possess both amplitude and phase components. To ensure accuracy across different ONN structures, mutual learning is employed. Experiments have shown that the Oplixnet structure can significantly reduce the size of ONNs while maintaining accuracy, with a reduction of 75.03% in area and a decrease of 0.33% in accuracy on a fully connected neural network (FCNN), and a reduction of 74.88% in area and a decrease of 2.38% in accuracy on ResNet-32."
        ],
        [
            "Optical neural networks (ONNs) are a groundbreaking technology that has the ability to perform deep learning tasks with incredible efficiency and speed. The Oplixnet model is unique in that it can utilize both amplitude and phase information by converting image data into light signals that have both amplitude and phase components. To guarantee accuracy across different ONN structures, mutual learning is employed. Experiments have shown that the Oplixnet structure can dramatically reduce the size of ONNs while maintaining accuracy, with a reduction of 75.03% in area and a decrease of 0.33% in accuracy on a fully connected neural network (FCNN), and a reduction of 74.88% in area and a decrease of 2.38% in accuracy on ResNet-32."
        ],
        [
            "Optical neural networks (ONNs) have revolutionized deep learning tasks with their incredible efficiency and speed. Unlike other models, Oplixnet takes advantage of both amplitude and phase information by converting image data into light signals with both components. Mutual learning ensures accuracy across different ONN structures. Experiments have shown that Oplixnet can significantly reduce the size of ONNs while maintaining accuracy, with a 75.03% reduction in area and a 0.33% decrease in accuracy for a fully connected neural network (FCNN), and a 74.88% reduction in area and a 2.38% decrease in accuracy for ResNet-32."
        ],
        [
            "Optical neural networks (ONNs) have revolutionized deep learning tasks with their incredible efficiency and speed. Unlike other models, Oplixnet takes advantage of both amplitude and phase information by converting image data into light signals with both components. Mutual learning ensures accuracy across different ONN structures. Experiments have shown that Oplixnet can significantly reduce the size of ONNs while maintaining accuracy, with a 75.03% reduction in area and a 0.33% decrease in accuracy for a fully connected neural network (FCNN), and a 74.88% reduction in area and a 2.38% decrease in accuracy for ResNet-32."
        ],
        [
            "The emergence of optical neural networks (ONNs) has revolutionized deep learning tasks, boasting exceptional efficiency and speed. In contrast to other models, Oplixnet exploits both the amplitude and phase information by converting image data into light signals with both components. Mutual learning ensures accuracy across different ONN structures. Experimental results demonstrate that Oplixnet can significantly shrink the size of ONNs without compromising accuracy, with a 75.03% reduction in area and a 0.33% decrease in accuracy for a fully connected neural network (FCNN), and a 74.88% reduction in area and a 2.38% decrease in accuracy for ResNet-32."
        ],
        [
            "Optical neural networks (ONNs) are revolutionizing deep learning tasks with their exceptional efficiency and speed. Unlike other models, Oplixnet takes advantage of both the amplitude and phase information by converting image data into light signals with both components. This enables mutual learning, which ensures high accuracy across different ONN structures. Experimental results demonstrate that Oplixnet can significantly shrink the size of ONNs without compromising accuracy, reducing the area of a fully connected neural network (FCNN) by 75.03% and accuracy by only 0.33%, and reducing the area of ResNet-32 by 74.88% and accuracy by 2.38%."
        ],
        [
            "Optical neural networks (ONNs) are disrupting the field of deep learning with their unmatched efficiency and velocity. Unlike other models, Oplixnet harnesses the power of both the amplitude and phase information by converting image data into light signals that carry both of these components. This enables mutual learning, which ensures high accuracy across different ONN architectures. Experimental results show that Oplixnet can dramatically shrink the size of ONNs without sacrificing accuracy, reducing the area of a fully connected neural network (FCNN) by 75.03% and accuracy by only 0.33%, and reducing the area of ResNet-32 by 74.88% and accuracy by 2.38%."
        ],
        [
            "Oplixnet is a type of optical neural network (ONN) that uses both amplitude and phase information to achieve mutual learning and high accuracy. This allows Oplixnet to significantly reduce the size of ONNs without sacrificing accuracy, reducing the area of a fully connected neural network (FCNN) by 75.03% and accuracy by only 0.33%, and reducing the area of ResNet-32 by 74.88% and accuracy by 2.38%. The experimental results demonstrate the efficiency and velocity of Oplixnet in disrupting the field of deep learning."
        ],
        [
            "Oplixnet is a type of optical neural network (ONN) that uses both amplitude and phase information to achieve mutual learning and high accuracy. This allows Oplixnet to significantly reduce the size of ONNs without sacrificing accuracy, reducing the area of a fully connected neural network (FCNN) by 75.03% and accuracy by only 0.33%, and reducing the area of ResNet-32 by 74.88% and accuracy by 2.38%. The experimental results demonstrate the efficiency and velocity of Oplixnet in disrupting the field of deep learning."
        ],
        [
            "Oplixnet is a type of optical neural network (ONN) that uses both amplitude and phase information to achieve mutual learning and high accuracy. This allows Oplixnet to significantly reduce the size of ONNs without sacrificing accuracy, reducing the area of a fully connected neural network (FCNN) by 75.03% and accuracy by only 0.33%, and reducing the area of ResNet-32 by 74.88% and accuracy by 2.38%. The experimental results demonstrate the efficiency and velocity of Oplixnet in disrupting the field of deep learning."
        ],
        [
            "The Oplixnet is a type of optical neural network (ONN) that uses both amplitude and phase information to achieve mutual learning and high accuracy. This allows the Oplixnet to significantly reduce the size of ONNs without sacrificing accuracy, reducing the area of a fully connected neural network (FCNN) by 75.03% and accuracy by only 0.33%, and reducing the area of ResNet-32 by 74.88% and accuracy by 2.38%. The experimental results demonstrate the efficiency and velocity of the Oplixnet in disrupting the field of deep learning."
        ],
        [
            "The Oplixnet is a revolutionary new type of optical neural network (ONN) that utilizes both amplitude and phase information to achieve mutual learning and high accuracy. This breakthrough allows the Oplixnet to significantly reduce the size of ONNs without sacrificing accuracy, reducing the area of a fully connected neural network (FCNN) by 75.03% and accuracy by only 0.33%, and reducing the area of ResNet-32 by 74.88% and accuracy by 2.38%. The experimental results clearly demonstrate the efficiency and velocity of the Oplixnet in disrupting the field of deep learning."
        ],
        [
            "The Oplixnet is a groundbreaking new type of optical neural network (ONN) that makes use of both amplitude and phase information in order to achieve mutual learning and high accuracy. This breakthrough allows the Oplixnet to significantly reduce the size of ONNs without sacrificing accuracy, reducing the area of a fully connected neural network (FCNN) by 75.03% and accuracy by only 0.33%, and reducing the area of ResNet-32 by 74.88% and accuracy by 2.38%. The experimental results clearly demonstrate the efficiency and velocity of the Oplixnet in disrupting the field of deep learning."
        ],
        [
            "The Oplixnet is a revolutionary new type of optical neural network (ONN) that exploits both the amplitude and phase of the input signal to enable mutual learning and achieve high accuracy. This novel approach allows the Oplixnet to significantly reduce the size of ONNs without compromising accuracy. In fact, it is able to reduce the area of a fully connected neural network (FCNN) by 75.03% and accuracy by only 0.33%, while also reducing the area of ResNet-32 by 74.88% and accuracy by 2.38%. The experimental results clearly demonstrate the efficiency and velocity of the Oplixnet in revolutionizing the field of deep learning."
        ],
        [
            "The Oplixnet is a revolutionary new type of optical neural network (ONN) that uses both the amplitude and phase of the input signal to enable mutual learning and achieve high accuracy. This innovative approach allows the Oplixnet to significantly reduce the size of ONNs without sacrificing accuracy. In fact, it is able to reduce the area of a fully connected neural network (FCNN) by 75.03% and accuracy by only 0.33%, while also reducing the area of ResNet-32 by 74.88% and accuracy by 2.38%. The experimental results clearly demonstrate the efficiency and velocity of the Oplixnet in revolutionizing the field of deep learning."
        ],
        [
            "The Oplixnet is a type of optical neural network that uses both the amplitude and phase of the input signal to enable mutual learning and achieve high accuracy. This approach allows the Oplixnet to significantly reduce the size of ONNs without sacrificing accuracy. In fact, it is able to reduce the area of a fully connected neural network by 75.03% and accuracy by only 0.33%, while also reducing the area of ResNet-32 by 74.88% and accuracy by 2.38%. The experimental results demonstrate the efficiency and velocity of the Oplixnet in revolutionizing the field of deep learning."
        ],
        [
            "The Oplixnet is a novel type of optical neural network that leverages both the amplitude and phase of the input signal to facilitate mutual learning and achieve exceptional accuracy. This approach enables the Oplixnet to dramatically reduce the size of ONNs without compromising accuracy. In fact, it can reduce the area of a fully connected neural network by 75.03% while only sacrificing 0.33% in accuracy, and reduce the area of ResNet-32 by 74.88% while only sacrificing 2.38% in accuracy. The experimental results highlight the efficiency and velocity of the Oplixnet in transforming the field of deep learning."
        ],
        [
            "The Oplixnet is a unique type of optical neural network that uses both the amplitude and phase of the input signal to facilitate mutual learning and achieve superior accuracy. This approach allows the Oplixnet to significantly reduce the size of ONNs without sacrificing accuracy. In fact, it can reduce the area of a fully connected neural network by 75.03% while only sacrificing 0.33% in accuracy, and reduce the area of ResNet-32 by 74.88% while only sacrificing 2.38% in accuracy. The experimental results demonstrate the efficiency and speed of the Oplixnet in transforming the field of deep learning."
        ],
        [
            "The Oplixnet is an innovative type of optical neural network that utilizes both the amplitude and phase of the input signal to facilitate mutual learning and achieve superior accuracy. This approach enables the Oplixnet to significantly reduce the size of ONNs without sacrificing accuracy. In fact, it can reduce the area of a fully connected neural network by 75.03% while only sacrificing 0.33% in accuracy, and reduce the area of ResNet-32 by 74.88% while only sacrificing 2.38% in accuracy. The experimental results demonstrate the efficiency and speed of the Oplixnet in transforming the field of deep learning."
        ],
        [
            "The Oplixnet is a novel type of optical neural network that makes use of both the amplitude and phase of the input signal to facilitate mutual learning and achieve greater accuracy. This approach allows the Oplixnet to significantly reduce the size of ONNs without compromising accuracy. In fact, it can reduce the area of a fully connected neural network by 75.03% while only sacrificing 0.33% in accuracy, and reduce the area of ResNet-32 by 74.88% while only sacrificing 2.38% in accuracy. The experimental results demonstrate the efficiency and speed of the Oplixnet in transforming the field of deep learning."
        ],
        [
            "A novel type of optical neural network, the Oplixnet, has been developed which utilizes both the amplitude and phase of the input signal to facilitate mutual learning and achieve greater accuracy. This approach has enabled the Oplixnet to significantly reduce the size of ONNs without compromising accuracy. In fact, it can reduce the area of a fully connected neural network by 75.03% while only sacrificing 0.33% in accuracy, and reduce the area of ResNet-32 by 74.88% while only sacrificing 2.38% in accuracy. The experimental results demonstrate the efficiency and speed of the Oplixnet in transforming the field of deep learning."
        ],
        [
            "A new kind of optical neural network, Oplixnet, has been developed that uses both the amplitude and phase of the input signal to improve accuracy through mutual learning. This approach allows Oplixnet to achieve greater accuracy without sacrificing the size of ONNs. In fact, Oplixnet can reduce the area of a fully connected neural network by 75.03%, with only a 0.33% sacrifice in accuracy, and the area of ResNet-32 by 74.88%, with only a 2.38% sacrifice in accuracy. The results of the experiments demonstrate the efficiency and speed of Oplixnet in transforming the field of deep learning."
        ],
        [
            "A new type of optical neural network, called Oplixnet, has been developed that uses both the amplitude and phase of the input signal to improve accuracy. This approach allows Oplixnet to achieve greater accuracy without increasing the size of optical neural networks. In fact, Oplixnet can reduce the area of a fully connected neural network by 75.03%, while sacrificing only 0.33% accuracy. Similarly, the area of ResNet-32 can be reduced by 74.88%, with only a 2.38% loss in accuracy. The experimental results demonstrate the efficiency and speed of Oplixnet in transforming the field of deep learning."
        ],
        [
            "A new type of optical neural network, called Oplixnet, has been developed that uses both the amplitude and phase of the input signal to improve accuracy. This approach allows Oplixnet to achieve greater accuracy without increasing the size of optical neural networks. In fact, Oplixnet can reduce the area of a fully connected neural network by 75.03%, while sacrificing only 0.33% accuracy. Similarly, the area of ResNet-32 can be reduced by 74.88%, with only a 2.38% loss in accuracy. The experimental results demonstrate the efficiency and speed of Oplixnet in transforming the field of deep learning."
        ]
    ]
}