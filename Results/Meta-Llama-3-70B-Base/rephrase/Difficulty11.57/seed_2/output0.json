{
    "adjacency_matrix": [
        [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0
        ]
    ],
    "prompt_init": [
        "You will receive a text. Your task is to rephrase this text without modifying its meaning. Just output your new text, nothing else. Here is the text:"
    ],
    "prompt_update": [
        "You will receive a text. Your task is to rephrase this text without modifying its meaning. Just output your new text, nothing else. Here is the text:"
    ],
    "personality_list": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
    ],
    "format_prompt": [
        ""
    ],
    "initial_story": "having the potential for high speed, high throughput, and low energy cost,optical neural networks (onns) have emerged as a promising candidate foraccelerating deep learning tasks. in conventional onns, light amplitudes aremodulated at the input and detected at the output. however, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. to address this issue, in this paper, we propose aframework called oplixnet to compress the areas of onns by modulating inputimage data into the amplitudes and phase parts of light signals. the input andoutput parts of the onns are redesigned to make full use of both amplitude andphase information. moreover, mutual learning across different onn structures isintroduced to maintain the accuracy. experimental results demonstrate that theproposed framework significantly reduces the areas of onns with the accuracywithin an acceptable range. for instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (fcnn) and 74.88% area isreduced with a 2.38% accuracy decrease on resnet-32. ",
    "stories": [
        [
            "Optical neural networks (ONNs) have emerged as a promising candidate for accelerating deep learning tasks due to their potential for high speed, high throughput, and low energy cost. In conventional ONNs, light amplitudes are modulated at the input and detected at the output. However, the light phases are still ignored in conventional structures, although they can also carry information for computing. To address this issue, in this paper, we propose a framework called OPLIXNET to compress the areas of ONNs by modulating input image data into the amplitudes and phase parts of light signals. The input and output parts of the ONNs are redesigned to make full use of both amplitude and phase information. Moreover, mutual learning across different ONN structures is introduced to maintain the accuracy. Experimental results demonstrate that the proposed framework significantly reduces the areas of ONNs with the accuracy within an acceptable range. For instance, 75.03% area is reduced with a 0.33% accuracy decrease on fully connected neural network (FCNN) and 74.88% area is reduced with a 2.38% accuracy decrease on ResNet-32."
        ],
        [
            "Optical neural networks (ONNs) are a promising approach to accelerate deep learning tasks due to their potential for high speed, high throughput, and low energy consumption. In traditional ONNs, light amplitudes are modulated at the input and detected at the output. However, light phases are still ignored in conventional structures, even though they can also carry information for computing. To address this issue, we propose OPLIXNET, a framework that compresses ONN areas by modulating input image data into the amplitude and phase parts of light signals. The input and output parts of ONNs are redesigned to make full use of both amplitude and phase information. Moreover, we introduce mutual learning across different ONN structures to maintain accuracy. Experimental results demonstrate that the proposed framework significantly reduces ONN areas while maintaining accuracy within an acceptable range. For example, 75.03% of the area is reduced with a 0.33% accuracy decrease on FCNN and 74.88% of the area is reduced with a 2.38% accuracy decrease on ResNet-32."
        ],
        [
            "Optical neural networks (ONNs) are an innovative approach to speed up deep learning tasks because of their potential for fast speeds, high throughput, and low energy usage. In typical ONNs, light amplitudes are adjusted at the input and detected at the output. Yet, light phases are still disregarded in conventional structures, although they can also hold information for computing. To tackle this issue, we introduce OPLIXNET, a framework that shrinks ONN areas by modifying input image data into the amplitude and phase portions of light signals. The input and output parts of ONNs are reworked to fully utilize both amplitude and phase information. Additionally, we incorporate mutual learning across different ONN structures to keep precision. The results of our experiments show that the proposed framework drastically reduces ONN areas while keeping accuracy within an acceptable limit. For instance, 75.03% of the area is reduced with a 0.33% accuracy decline on FCNN and 74.88% of the area is reduced with a 2.38% accuracy decline on ResNet-32."
        ],
        [
            "Optical neural networks (ONNs) are an innovative approach to speed up deep learning tasks because of their potential for fast speeds, high throughput, and low energy usage. In typical ONNs, light amplitudes are adjusted at the input and detected at the output. Yet, light phases are still disregarded in conventional structures, although they can also hold information for computing. To tackle this issue, we introduce OPLIXNET, a framework that shrinks ONN areas by modifying input image data into the amplitude and phase portions of light signals. The input and output parts of ONNs are reworked to fully utilize both amplitude and phase information. Additionally, we incorporate mutual learning across different ONN structures to keep precision. The results of our experiments show that the proposed framework drastically reduces ONN areas while keeping accuracy within an acceptable limit. For instance, 75.03% of the area is reduced with a 0.33% accuracy decline on FCNN and 74.88% of the area is reduced with a 2.38% accuracy decline on ResNet-32."
        ],
        [
            "Traditional optical neural networks (ONNs) have the potential to enhance the performance of deep learning tasks by offering fast speeds, high throughput, and low energy usage. Despite this, they fail to utilize the full potential of light signals as they only adjust the amplitude at the input and detect it at the output. To overcome this limitation, we introduce OPLIXNET, a framework that leverages the amplitude and phase portions of light signals to reduce the size of ONNs. We modify the input and output parts of ONNs to utilize both amplitude and phase information, which allows us to significantly reduce the area of the ONNs while maintaining an acceptable accuracy. Our experiments show that OPLIXNET can reduce the area of ONNs by 75.03% with a 0.33% accuracy decline on FCNN and 74.88% with a 2.38% accuracy decline on ResNet-32."
        ],
        [
            "Optical neural networks (ONNs) offer fast speeds, high throughput, and low energy usage for deep learning tasks. However, traditional ONNs only adjust the amplitude at the input and detect it at the output, failing to utilize the full potential of light signals. To overcome this limitation, we introduce OPLIXNET, a framework that reduces the size of ONNs by leveraging both the amplitude and phase portions of light signals. By modifying the input and output parts of ONNs to utilize both amplitude and phase information, we can significantly reduce the area of the ONNs while maintaining an acceptable accuracy. Our experiments show that OPLIXNET can reduce the area of ONNs by 75.03% with a 0.33% accuracy decline on FCNN and 74.88% with a 2.38% accuracy decline on ResNet-32."
        ],
        [
            "Optical neural networks offer fast speeds, high throughput, and low energy usage for deep learning tasks. However, traditional ONNs only adjust the amplitude at the input and detect it at the output, failing to utilize the full potential of light signals. To overcome this limitation, we introduce OPLIXNET, a framework that reduces the size of ONNs by leveraging both the amplitude and phase portions of light signals. By modifying the input and output parts of ONNs to utilize both amplitude and phase information, we can significantly reduce the area of the ONNs while maintaining an acceptable accuracy. Our experiments show that OPLIXNET can reduce the area of ONNs by 75.03% with a 0.33% accuracy decline on FCNN and 74.88% with a 2.38% accuracy decline on ResNet-32."
        ],
        [
            "Optical neural networks (ONNs) offer several advantages over traditional neural networks, including faster speeds, higher throughput, and lower energy usage for deep learning tasks. However, current ONNs only adjust the amplitude at the input and detect it at the output, which limits their ability to fully utilize the potential of light signals. To address this limitation, we introduce OPLIXNET, a framework that reduces the size of ONNs by leveraging both the amplitude and phase portions of light signals. By modifying the input and output parts of ONNs to utilize both amplitude and phase information, we can significantly reduce the area of the ONNs while maintaining an acceptable accuracy. Our experiments show that OPLIXNET can reduce the area of ONNs by 75.03% with a 0.33% accuracy decline on fully connected neural networks (FCNN) and 74.88% with a 2.38% accuracy decline on residual neural networks (ResNet-32)."
        ],
        [
            "Optical neural networks (ONNs) offer several advantages over traditional neural networks, including faster speeds, higher throughput, and lower energy usage for deep learning tasks. However, current ONNs only adjust the amplitude at the input and detect it at the output, which limits their ability to fully utilize the potential of light signals. To address this limitation, we introduce OPLIXNET, a framework that reduces the size of ONNs by leveraging both the amplitude and phase portions of light signals. By modifying the input and output parts of ONNs to utilize both amplitude and phase information, we can significantly reduce the area of the ONNs while maintaining an acceptable accuracy. Our experiments show that OPLIXNET can reduce the area of ONNs by 75.03% with a 0.33% accuracy decline on fully connected neural networks (FCNN) and 74.88% with a 2.38% accuracy decline on residual neural networks (ResNet-32)."
        ],
        [
            "Optical neural networks (ONNs) have several advantages over traditional neural networks, including faster speeds, higher throughput, and lower energy usage for deep learning tasks. However, current ONNs only adjust the amplitude at the input and detect it at the output, which limits their ability to fully utilize the potential of light signals. To address this limitation, we introduce OPLIXNET, a framework that reduces the size of ONNs by leveraging both the amplitude and phase portions of light signals. By modifying the input and output parts of ONNs to utilize both amplitude and phase information, we can significantly reduce the area of the ONNs while maintaining an acceptable accuracy. Our experiments show that OPLIXNET can reduce the area of ONNs by 75.03% with a 0.33% accuracy decline on fully connected neural networks (FCNN) and 74.88% with a 2.38% accuracy decline on residual neural networks (ResNet-32)."
        ],
        [
            "Optical neural networks (ONNs) have several advantages over traditional neural networks, including faster speeds, higher throughput, and lower energy usage for deep learning tasks. However, current ONNs only adjust the amplitude at the input and detect it at the output, which limits their ability to fully utilize the potential of light signals. To address this limitation, we introduce OPLIXNET, a framework that reduces the size of ONNs by leveraging both the amplitude and phase portions of light signals. By modifying the input and output parts of ONNs to utilize both amplitude and phase information, we can significantly reduce the area of the ONNs while maintaining an acceptable accuracy. Our experiments show that OPLIXNET can reduce the area of ONNs by 75.03% with a 0.33% accuracy decline on fully connected neural networks (FCNN) and 74.88% with a 2.38% accuracy decline on residual neural networks (ResNet-32)."
        ],
        [
            "Optical neural networks (ONNs) have a number of advantages over conventional neural networks, such as faster processing speeds, higher throughput, and lower energy consumption for deep learning tasks. However, current ONNs only use the amplitude at the input and detect it at the output, which limits their ability to make full use of the potential of light signals. To address this limitation, we introduce OPLIXNET, a framework that reduces the size of ONNs by utilizing both the amplitude and phase components of light signals. By modifying the input and output parts of ONNs to use both amplitude and phase information, we can significantly reduce the area of the ONNs while maintaining an acceptable level of accuracy. Our experiments show that OPLIXNET can reduce the area of ONNs by 75.03% with a 0.33% decline in accuracy on fully connected neural networks (FCNN) and 74.88% with a 2.38% decline in accuracy on residual neural networks (ResNet-32)."
        ],
        [
            "Optical neural networks (ONNs) have several advantages over traditional neural networks, such as faster processing speeds, higher throughput, and lower energy consumption for deep learning tasks. However, current ONNs only utilize the amplitude at the input and detect it at the output, which limits their ability to fully harness the potential of light signals. To address this limitation, we introduce OPLIXNET, a framework that reduces the size of ONNs by leveraging both the amplitude and phase components of light signals. By modifying the input and output parts of ONNs to use both amplitude and phase information, we can significantly reduce the area of the ONNs while maintaining an acceptable level of accuracy. Our experiments show that OPLIXNET can reduce the area of ONNs by 75.03% with a 0.33% decline in accuracy on fully connected neural networks (FCNN) and 74.88% with a 2.38% decline in accuracy on residual neural networks (ResNet-32)."
        ],
        [
            "Optical neural networks (ONNs) offer several advantages over traditional neural networks, including faster processing speeds, higher throughput, and lower energy consumption for deep learning tasks. However, current ONNs only make use of the amplitude at the input and detect it at the output, limiting their potential. To overcome this, we introduce OPLIXNET, a framework that reduces the size of ONNs by leveraging both the amplitude and phase components of light signals. By modifying the input and output parts of ONNs to use both amplitude and phase information, we can significantly reduce the area of the ONNs while maintaining an acceptable level of accuracy. Our experiments show that OPLIXNET can reduce the area of ONNs by 75.03% with a 0.33% decline in accuracy on fully connected neural networks (FCNN) and 74.88% with a 2.38% decline in accuracy on residual neural networks (ResNet-32)."
        ],
        [
            "ONNs offer faster processing speeds, higher throughput, and lower energy consumption for deep learning tasks. To reduce the size of ONNs, we introduce OPLIXNET, which leverages both the amplitude and phase components of light signals. By modifying the input and output parts of ONNs, we can significantly reduce the area of the ONNs while maintaining an acceptable level of accuracy. Our experiments show that OPLIXNET can reduce the area of ONNs by 75.03% with a 0.33% decline in accuracy on FCNNs and 74.88% with a 2.38% decline in accuracy on ResNet-32s."
        ],
        [
            "ONNs are faster, more efficient, and lower in energy consumption for deep learning tasks than traditional electronic neural networks. To reduce the size of ONNs, we introduce OPLIXNET, which uses both the amplitude and phase components of light signals. By modifying the input and output parts of ONNs, we can significantly reduce the area of the ONNs while maintaining an acceptable level of accuracy. Our experiments show that OPLIXNET can reduce the area of ONNs by 75.03% with a 0.33% decline in accuracy on FCNNs and 74.88% with a 2.38% decline in accuracy on ResNet-32s."
        ],
        [
            "OPLIXNET is a new type of neural network that uses both the amplitude and phase components of light signals to reduce the size of traditional optical neural networks (ONNs). ONNs are faster, more efficient, and lower in energy consumption for deep learning tasks than traditional electronic neural networks. By modifying the input and output parts of ONNs, we can significantly reduce the area of the ONNs while maintaining an acceptable level of accuracy. Our experiments show that OPLIXNET can reduce the area of ONNs by 75.03% with a 0.33% decline in accuracy on FCNNs and 74.88% with a 2.38% decline in accuracy on ResNet-32s."
        ],
        [
            "OPLIXNET is a new type of neural network that uses both the amplitude and phase components of light signals to reduce the size of traditional optical neural networks (ONNs). ONNs are faster, more efficient, and lower in energy consumption for deep learning tasks than traditional electronic neural networks. By modifying the input and output parts of ONNs, we can significantly reduce the area of the ONNs while maintaining an acceptable level of accuracy. Our experiments show that OPLIXNET can reduce the area of ONNs by 75.03% with a 0.33% decline in accuracy on FCNNs and 74.88% with a 2.38% decline in accuracy on ResNet-32s."
        ],
        [
            "OPLIXNET is a new type of neural network that uses both the amplitude and phase components of light signals to reduce the size of traditional optical neural networks (ONNs). ONNs are faster, more efficient, and lower in energy consumption for deep learning tasks than traditional electronic neural networks. By modifying the input and output parts of ONNs, we can significantly reduce the area of the ONNs while maintaining an acceptable level of accuracy. Our experiments show that OPLIXNET can reduce the area of ONNs by 75.03% with a 0.33% decline in accuracy on FCNNs and 74.88% with a 2.38% decline in accuracy on ResNet-32s."
        ],
        [
            "OPLIXNET is a new type of neural network that uses both the amplitude and phase components of light signals to reduce the size of traditional optical neural networks (ONNs). ONNs are faster, more efficient, and lower in energy consumption for deep learning tasks than traditional electronic neural networks. By modifying the input and output parts of ONNs, we can significantly reduce the area of the ONNs while maintaining an acceptable level of accuracy. Our experiments show that OPLIXNET can reduce the area of ONNs by 75.03% with a 0.33% decline in accuracy on FCNNs and 74.88% with a 2.38% decline in accuracy on ResNet-32s."
        ],
        [
            "OPLIXNET is a new kind of neural network that takes advantage of both the strength and direction of light signals to make traditional optical neural networks (ONNs) smaller. ONNs are better at learning and using less energy than traditional electronic neural networks. We can make the ONNs much smaller by changing the way they take in and give out information, but it will make them a little less accurate. Our experiments show that OPLIXNET can make ONNs 75.03% smaller with a 0.33% drop in accuracy on FCNNs and 74.88% smaller with a 2.38% drop in accuracy on ResNet-32s."
        ],
        [
            "A new kind of neural network called OPLIXNET can make traditional optical neural networks (ONNs) smaller by taking advantage of both the strength and direction of light signals. ONNs are better at learning and using less energy than traditional electronic neural networks, but making them smaller by changing the way they take in and give out information comes at a cost - they become a little less accurate. Our experiments show that OPLIXNET can make ONNs 75.03% smaller with a 0.33% drop in accuracy on FCNNs and 74.88% smaller with a 2.38% drop in accuracy on ResNet-32s."
        ],
        [
            "A new type of neural network called OPLIXNET can make traditional optical neural networks (ONNs) smaller by using both the strength and direction of light signals. ONNs are better at learning and using less energy than traditional electronic neural networks, but making them smaller by changing the way they take in and give out information comes at a cost - they become a little less accurate. Our experiments show that OPLIXNET can make ONNs 75.03% smaller with a 0.33% drop in accuracy on FCNNs and 74.88% smaller with a 2.38% drop in accuracy on ResNet-32s."
        ],
        [
            "A new type of neural network called OPLIXNET can make traditional optical neural networks (ONNs) smaller by using both the strength and direction of light signals. ONNs are better at learning and using less energy than traditional electronic neural networks, but making them smaller by changing the way they take in and give out information comes at a cost - they become a little less accurate. Our experiments show that OPLIXNET can make ONNs 75.03% smaller with a 0.33% drop in accuracy on FCNNs and 74.88% smaller with a 2.38% drop in accuracy on ResNet-32s."
        ],
        [
            "The new type of neural network, called OPLIXNET, can make traditional optical neural networks (ONNs) smaller by taking in both the strength and direction of light signals. ONNs are better at learning and using less energy than traditional electronic neural networks, but making them smaller by changing the way they take in and give out information comes at a cost - they become a little less accurate. In our experiments, OPLIXNET was able to make ONNs 75.03% smaller with a 0.33% drop in accuracy on FCNNs and 74.88% smaller with a 2.38% drop in accuracy on ResNet-32s."
        ],
        [
            "The new type of neural network, called OPLIXNET, can make traditional optical neural networks (ONNs) smaller by taking in both the strength and direction of light signals. ONNs are better at learning and using less energy than traditional electronic neural networks, but making them smaller by changing the way they take in and give out information comes at a cost - they become a little less accurate. In our experiments, OPLIXNET was able to make ONNs 75.03% smaller with a 0.33% drop in accuracy on FCNNs and 74.88% smaller with a 2.38% drop in accuracy on ResNet-32s."
        ],
        [
            "In this study, we introduce a new type of neural network called OPLIXNET, which can make traditional optical neural networks (ONNs) smaller by taking in both the strength and direction of light signals. ONNs are better at learning and using less energy than traditional electronic neural networks, but making them smaller by changing the way they take in and give out information comes at a cost - they become a little less accurate. In our experiments, OPLIXNET was able to make ONNs 75.03% smaller with a 0.33% drop in accuracy on FCNNs and 74.88% smaller with a 2.38% drop in accuracy on ResNet-32s."
        ],
        [
            "In our study, we present OPLIXNET, a new type of neural network that can make traditional optical neural networks (ONNs) smaller by using both the strength and direction of light signals. ONNs are more efficient at learning and use less energy than traditional electronic neural networks, but making them smaller by changing how they take in and give out information comes at a cost - they become a little less accurate. In our experiments, OPLIXNET was able to make ONNs 75.03% smaller with a 0.33% drop in accuracy on FCNNs and 74.88% smaller with a 2.38% drop in accuracy on ResNet-32s."
        ],
        [
            "In our study, we propose OPLIXNET, a new type of neural network that can make traditional optical neural networks (ONNs) smaller by using both the strength and direction of light signals. ONNs are more efficient at learning and use less energy than traditional electronic neural networks, but making them smaller by changing how they take in and give out information comes at a cost - they become a little less accurate. In our experiments, OPLIXNET was able to make ONNs 75.03% smaller with a 0.33% drop in accuracy on FCNNs and 74.88% smaller with a 2.38% drop in accuracy on ResNet-32s."
        ],
        [
            "In our research, we introduce OPLIXNET, a novel type of neural network that reduces the size of traditional optical neural networks (ONNs) by utilizing both the intensity and phase of light signals. ONNs are more computationally efficient and consume less energy compared to traditional electronic neural networks, but downsizing them by modifying their input/output interfaces comes at the cost of slightly lower accuracy. In our experiments, OPLIXNET reduced the size of ONNs by 75.03% with a 0.33% drop in accuracy on FCNNs and by 74.88% with a 2.38% drop in accuracy on ResNet-32s."
        ],
        [
            "In our research, we introduce OPLIXNET, a novel type of neural network that reduces the size of traditional optical neural networks (ONNs) by utilizing both the intensity and phase of light signals. ONNs are more computationally efficient and consume less energy compared to traditional electronic neural networks, but downsizing them by modifying their input/output interfaces comes at the cost of slightly lower accuracy. In our experiments, OPLIXNET reduced the size of ONNs by 75.03% with a 0.33% drop in accuracy on FCNNs and by 74.88% with a 2.38% drop in accuracy on ResNet-32s."
        ],
        [
            "In our research, we present a new type of neural network called OPLIXNET, which reduces the size of traditional optical neural networks (ONNs) by using both the intensity and phase of light signals. ONNs are more computationally efficient and consume less energy than traditional electronic neural networks, but downsizing them by modifying their input/output interfaces comes at the cost of slightly lower accuracy. In our experiments, OPLIXNET reduced the size of ONNs by 75.03% with a 0.33% drop in accuracy on FCNNs and by 74.88% with a 2.38% drop in accuracy on ResNet-32s."
        ],
        [
            "We introduce OPLIXNET, a novel neural network architecture that reduces the size of traditional optical neural networks (ONNs) by utilizing both the intensity and phase of light signals. ONNs are more computationally efficient and energy-efficient than traditional electronic neural networks, but reducing their size by modifying their input/output interfaces comes at the cost of slightly reduced accuracy. In our experiments, OPLIXNET reduced the size of ONNs by 75.03% with a 0.33% drop in accuracy on FCNNs and by 74.88% with a 2.38% drop in accuracy on ResNet-32s."
        ],
        [
            "We propose OPLIXNET, an innovative neural network architecture that minimizes the size of conventional optical neural networks (ONNs) by exploiting both the intensity and phase of light signals. ONNs are computationally efficient and energy-efficient compared to traditional electronic neural networks, but reducing their size by modifying their input/output interfaces comes at the cost of slightly reduced accuracy. In our experiments, OPLIXNET reduced the size of ONNs by 75.03% with a 0.33% drop in accuracy on FCNNs and by 74.88% with a 2.38% drop in accuracy on ResNet-32s."
        ],
        [
            "We propose OPLIXNET, an innovative neural network architecture that minimizes the size of conventional optical neural networks (ONNs) by exploiting both the intensity and phase of light signals. ONNs are computationally efficient and energy-efficient compared to traditional electronic neural networks, but reducing their size by modifying their input/output interfaces comes at the cost of slightly reduced accuracy. In our experiments, OPLIXNET reduced the size of ONNs by 75.03% with a 0.33% drop in accuracy on FCNNs and by 74.88% with a 2.38% drop in accuracy on ResNet-32s."
        ],
        [
            "We propose a new neural network architecture called OPLIXNET that reduces the size of conventional optical neural networks (ONNs) by utilizing both the intensity and phase of light signals. ONNs offer significant computational and energy efficiency compared to traditional electronic neural networks, but modifying their input/output interfaces to reduce their size can come at the cost of a slight decrease in accuracy. In our experiments, OPLIXNET reduced the size of ONNs by 75.03% with a 0.33% drop in accuracy on FCNNs and by 74.88% with a 2.38% drop in accuracy on ResNet-32s."
        ],
        [
            "We introduce OPLIXNET, a novel neural network architecture that leverages the intensity and phase of light signals to reduce the size of traditional optical neural networks (ONNs). ONNs offer substantial computational and energy efficiency advantages over conventional electronic neural networks, but reducing their input/output interfaces for size can result in a small accuracy penalty. In our experiments, OPLIXNET decreased the size of ONNs by 75.03% with a 0.33% accuracy drop for FCNNs, and by 74.88% with a 2.38% accuracy drop for ResNet-32s."
        ],
        [
            "We propose OPLIXNET, an innovative neural network architecture that makes use of the intensity and phase of light signals to reduce the size of standard optical neural networks (ONNs). ONNs provide considerable computational and energy efficiency advantages over typical electronic neural networks, but reducing their input/output interfaces for size can result in a small accuracy penalty. In our experiments, OPLIXNET reduced the size of ONNs by 75.03% with a 0.33% accuracy drop for FCNNs, and by 74.88% with a 2.38% accuracy drop for ResNet-32s."
        ],
        [
            "We introduce OPLIXNET, a novel neural network architecture that exploits the intensity and phase of light signals to minimize the size of standard optical neural networks (ONNs). ONNs offer significant computational and energy efficiency benefits over traditional electronic neural networks, but reducing their input/output interfaces for size can result in a small accuracy penalty. In our experiments, OPLIXNET reduced the size of ONNs by 75.03% with a 0.33% accuracy drop for FCNNs, and by 74.88% with a 2.38% accuracy drop for ResNet-32s."
        ],
        [
            "We introduce a new neural network architecture called OPLIXNET that exploits the intensity and phase of light signals to reduce the size of standard optical neural networks (ONNs). ONNs offer significant computational and energy efficiency benefits compared to traditional electronic neural networks, but reducing their input/output interfaces for size can come at a small accuracy penalty. In our experiments, OPLIXNET reduced the size of ONNs by 75.03% with only a 0.33% accuracy drop for FCNNs, and by 74.88% with a 2.38% accuracy drop for ResNet-32s."
        ],
        [
            "We present OPLIXNET, a novel neural network architecture that uses both intensity and phase of light signals to reduce the size of standard optical neural networks (ONNs). ONNs have many advantages over traditional electronic neural networks in terms of computation and energy efficiency, but reducing their input/output interfaces can result in a small accuracy penalty. In our experiments, OPLIXNET reduced the size of ONNs by 75.03% with only a 0.33% accuracy drop for fully connected neural networks (FCNNs), and by 74.88% with a 2.38% accuracy drop for ResNet-32s."
        ],
        [
            "We present OPLIXNET, a new kind of neural network architecture that takes advantage of both the intensity and phase of light signals in order to reduce the size of standard optical neural networks (ONNs). ONNs have many advantages over traditional electronic neural networks in terms of computation and energy efficiency, but reducing their input/output interfaces can lead to a small accuracy penalty. In our experiments, OPLIXNET reduced the size of ONNs by 75.03% with only a 0.33% accuracy drop for fully connected neural networks (FCNNs), and by 74.88% with a 2.38% accuracy drop for ResNet-32s."
        ],
        [
            "We propose OPLIXNET, a novel neural network architecture that exploits both the amplitude and phase of optical signals to decrease the size of conventional optical neural networks (ONNs). ONNs have many advantages over traditional electronic neural networks in terms of computational and energy efficiency, but reducing their input/output interfaces can lead to a small accuracy penalty. Our experiments show that OPLIXNET reduced the size of ONNs by 75.03% with only a 0.33% accuracy drop for fully connected neural networks (FCNNs), and by 74.88% with a 2.38% accuracy drop for ResNet-32s."
        ],
        [
            "We present OPLIXNET, a novel neural network architecture that exploits the amplitude and phase of optical signals to reduce the size of conventional optical neural networks (ONNs). ONNs have many benefits over traditional electronic neural networks in terms of computation and energy efficiency, but reducing their input/output interfaces can lead to a small accuracy loss. Our experiments show that OPLIXNET reduced the size of ONNs by 75.03% with only a 0.33% accuracy drop for fully connected neural networks (FCNNs), and by 74.88% with a 2.38% accuracy drop for ResNet-32s."
        ],
        [
            "We introduce OPLIXNET, a brand new neural network design that takes advantage of the amplitude and phase of optical signals to shrink the size of traditional optical neural networks (ONNs). ONNs have many advantages over conventional electronic neural networks when it comes to computing and energy efficiency, but reducing their input/output interfaces can cause a small accuracy loss. Our experiments show that OPLIXNET reduced the size of ONNs by 75.03% with only a 0.33% accuracy drop for fully connected neural networks (FCNNs), and by 74.88% with a 2.38% accuracy drop for ResNet-32s."
        ],
        [
            "OPLIXNET, a novel neural network architecture that leverages the amplitude and phase of optical signals to reduce the size of traditional optical neural networks (ONNs), is introduced. ONNs offer numerous benefits over conventional electronic neural networks in terms of computing and energy efficiency, but reducing their input/output interfaces can lead to a small loss in accuracy. Our experiments show that OPLIXNET reduces the size of ONNs by 75.03% with only a 0.33% accuracy drop for fully connected neural networks (FCNNs), and by 74.88% with a 2.38% accuracy drop for ResNet-32s."
        ],
        [
            "A novel neural network architecture called OPLIXNET has been introduced, which leverages the amplitude and phase of optical signals to reduce the size of traditional optical neural networks (ONNs). ONNs offer numerous benefits over conventional electronic neural networks in terms of computing and energy efficiency, but reducing their input/output interfaces can lead to a small loss in accuracy. Experiments have shown that OPLIXNET reduces the size of ONNs by 75.03% with only a 0.33% accuracy drop for fully connected neural networks (FCNNs), and by 74.88% with a 2.38% accuracy drop for ResNet-32s."
        ],
        [
            "OPLIXNET is a novel neural network architecture that takes advantage of the amplitude and phase of optical signals to shrink the size of traditional optical neural networks (ONNs). ONNs provide numerous benefits over conventional electronic neural networks in terms of computing and energy efficiency, but reducing the number of input/output interfaces can result in a small loss of accuracy. Experiments have demonstrated that OPLIXNET reduces the size of ONNs by 75.03% with only a 0.33% drop in accuracy for fully connected neural networks (FCNNs), and by 74.88% with a 2.38% accuracy drop for ResNet-32s."
        ],
        [
            "OPLIXNET is a new type of neural network that uses the amplitude and phase of optical signals to make traditional optical neural networks (ONNs) smaller. ONNs are more efficient in terms of computing and energy than conventional electronic neural networks, but reducing the number of input/output interfaces can lead to a slight decrease in accuracy. Experiments have shown that OPLIXNET makes ONNs 75.03% smaller with only a 0.33% loss in accuracy for fully connected neural networks (FCNNs), and 74.88% smaller with a 2.38% accuracy drop for ResNet-32s."
        ],
        [
            "OPLIXNET is a new type of neural network that uses the amplitude and phase of optical signals to make traditional optical neural networks (ONNs) smaller. ONNs are more efficient in terms of computing and energy than conventional electronic neural networks, but reducing the number of input/output interfaces can lead to a slight decrease in accuracy. Experiments have shown that OPLIXNET makes ONNs 75.03% smaller with only a 0.33% loss in accuracy for fully connected neural networks (FCNNs), and 74.88% smaller with a 2.38% accuracy drop for ResNet-32s."
        ]
    ]
}