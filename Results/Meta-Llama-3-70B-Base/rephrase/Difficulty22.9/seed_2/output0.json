{
    "adjacency_matrix": [
        [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0
        ]
    ],
    "prompt_init": [
        "You will receive a text. Your task is to rephrase this text without modifying its meaning. Just output your new text, nothing else. Here is the text:"
    ],
    "prompt_update": [
        "You will receive a text. Your task is to rephrase this text without modifying its meaning. Just output your new text, nothing else. Here is the text:"
    ],
    "personality_list": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
    ],
    "format_prompt": [
        ""
    ],
    "initial_story": "musculoskeletal diseases and cognitive impairments in patients lead todifficulties in movement as well as negative effects on their psychologicalhealth. clinical gait analysis, a vital tool for early diagnosis and treatment,traditionally relies on expensive optical motion capture systems. recentadvances in computer vision and deep learning have opened the door to moreaccessible and cost-effective alternatives. this paper introduces a novelspatio-temporal transformer network to estimate critical gait parameters fromrgb videos captured by a single-view camera. empirical evaluations on a publicdataset of cerebral palsy patients indicate that the proposed frameworksurpasses current state-of-the-art approaches and show significant improvementsin predicting general gait parameters (including walking speed, gait deviationindex - gdi, and knee flexion angle at maximum extension), while utilizingfewer parameters and alleviating the need for manual feature extraction. ",
    "stories": [
        [
            "musculoskeletal diseases and cognitive impairments in patients lead to difficulties in movement as well as negative effects on their psychological health. clinical gait analysis, a vital tool for early diagnosis and treatment, traditionally relies on expensive optical motion capture systems. recent advances in computer vision and deep learning have opened the door to more accessible and cost-effective alternatives. this paper introduces a novel spatio-temporal transformer network to estimate critical gait parameters from rgb videos captured by a single-view camera. empirical evaluations on a public dataset of cerebral palsy patients indicate that the proposed framework surpasses current state-of-the-art approaches and show significant improvements in predicting general gait parameters (including walking speed, gait deviation index - gdi, and knee flexion angle at maximum extension), while utilizing fewer parameters and alleviating the need for manual feature extraction."
        ],
        [
            "Musculoskeletal diseases and cognitive impairments in patients lead to difficulties in movement as well as negative effects on their psychological health. Clinical gait analysis, a vital tool for early diagnosis and treatment, traditionally relies on expensive optical motion capture systems. Recent advances in computer vision and deep learning have opened the door to more accessible and cost-effective alternatives. This paper introduces a novel spatio-temporal transformer network to estimate critical gait parameters from RGB videos captured by a single-view camera. Empirical evaluations on a public dataset of cerebral palsy patients indicate that the proposed framework surpasses current state-of-the-art approaches and show significant improvements in predicting general gait parameters (including walking speed, gait deviation index - GDI, and knee flexion angle at maximum extension), while utilizing fewer parameters and alleviating the need for manual feature extraction."
        ],
        [
            "Musculoskeletal diseases and cognitive impairments in patients lead to difficulties in movement as well as negative effects on their psychological health. Clinical gait analysis, a vital tool for early diagnosis and treatment, traditionally relies on expensive optical motion capture systems. Recent advances in computer vision and deep learning have opened the door to more accessible and cost-effective alternatives. This paper introduces a novel spatio-temporal transformer network to estimate critical gait parameters from RGB videos captured by a single-view camera. Empirical evaluations on a public dataset of cerebral palsy patients indicate that the proposed framework surpasses current state-of-the-art approaches and show significant improvements in predicting general gait parameters (including walking speed, gait deviation index - GDI, and knee flexion angle at maximum extension), while utilizing fewer parameters and alleviating the need for manual feature extraction."
        ],
        [
            "Musculoskeletal conditions and cognitive problems in patients often lead to mobility issues and negative psychological outcomes. Traditional methods of clinical gait analysis rely on expensive optical motion capture systems for diagnosis and treatment. Advances in computer vision and deep learning have paved the way for more accessible and cost-effective solutions. This paper presents a new spatio-temporal transformer network that estimates important gait parameters from RGB videos taken with a single-view camera. Empirical studies on a public dataset of cerebral palsy patients show that the proposed framework outperforms existing state-of-the-art approaches and significantly improves the prediction of general gait parameters (such as walking speed, gait deviation index - GDI, and knee flexion angle at maximum extension), while using fewer parameters and reducing the need for manual feature extraction."
        ],
        [
            "Musculoskeletal conditions and cognitive problems often lead to mobility issues and negative psychological outcomes in patients. Conventional clinical gait analysis methods use expensive optical motion capture systems for diagnosis and treatment. However, advances in computer vision and deep learning have made more accessible and cost-effective solutions available. In this paper, we present a novel spatio-temporal transformer network that estimates important gait parameters from RGB videos captured with a single-view camera. Empirical studies on a public dataset of cerebral palsy patients show that our proposed framework outperforms existing state-of-the-art approaches and significantly improves the prediction of general gait parameters (walking speed, gait deviation index - GDI, and knee flexion angle at maximum extension). Additionally, our approach uses fewer parameters and reduces the need for manual feature extraction."
        ],
        [
            "Musculoskeletal conditions and cognitive problems often lead to mobility issues and negative psychological outcomes in patients. Conventional clinical gait analysis methods use expensive optical motion capture systems for diagnosis and treatment. However, advances in computer vision and deep learning have made more accessible and cost-effective solutions available. In this paper, we present a novel spatio-temporal transformer network that estimates important gait parameters from RGB videos captured with a single-view camera. Empirical studies on a public dataset of cerebral palsy patients show that our proposed framework outperforms existing state-of-the-art approaches and significantly improves the prediction of general gait parameters (walking speed, gait deviation index - GDI, and knee flexion angle at maximum extension). Additionally, our approach uses fewer parameters and reduces the need for manual feature extraction."
        ],
        [
            "Musculoskeletal conditions and cognitive problems often result in mobility issues and negative psychological outcomes in patients. Conventional clinical gait analysis methods rely on expensive optical motion capture systems for diagnosis and treatment. However, recent advances in computer vision and deep learning have made more accessible and cost-effective solutions possible. In this paper, we present a novel spatio-temporal transformer network that estimates important gait parameters from RGB videos captured with a single-view camera. Empirical studies on a public dataset of cerebral palsy patients demonstrate that our proposed framework outperforms existing state-of-the-art approaches and significantly improves the prediction of general gait parameters (walking speed, gait deviation index - GDI, and knee flexion angle at maximum extension). Additionally, our approach requires fewer parameters and reduces the need for manual feature extraction."
        ],
        [
            "Musculoskeletal disorders and cognitive impairments frequently lead to limited mobility and poor mental health outcomes in patients. Traditional clinical gait analysis techniques employ expensive optical motion capture systems for diagnosis and therapy. However, with the advancement of computer vision and deep learning, more affordable and practical solutions are now available. This paper introduces a novel spatiotemporal transformer network that estimates critical gait metrics from RGB video footage captured with a single-view camera. Experimental results on a publicly accessible dataset of cerebral palsy patients show that our proposed method outperforms existing state-of-the-art models and significantly enhances the prediction of universal gait metrics (walking speed, gait deviation index (GDI), and maximum knee flexion angle). Moreover, our approach necessitates fewer parameters and minimizes the need for manual feature extraction."
        ],
        [
            "Musculoskeletal disorders and cognitive impairments often result in reduced mobility and mental health issues among patients. Conventional clinical gait analysis methods rely on costly optical motion capture systems for diagnosis and treatment. Nevertheless, thanks to the progress in computer vision and deep learning, more affordable and feasible alternatives are now emerging. In this paper, we introduce a novel spatiotemporal transformer network that predicts important gait parameters from RGB video footage recorded with a single-view camera. Experimental findings on a publicly accessible dataset of patients with cerebral palsy reveal that our suggested approach surpasses existing state-of-the-art models and significantly improves the prediction of general gait metrics (walking speed, gait deviation index (GDI), and maximum knee flexion angle). Additionally, our method requires fewer parameters and reduces the need for manual feature extraction."
        ],
        [
            "Musculoskeletal disorders and cognitive impairments often result in reduced mobility and mental health issues among patients. Conventional clinical gait analysis methods rely on costly optical motion capture systems for diagnosis and treatment. Nevertheless, thanks to the progress in computer vision and deep learning, more affordable and feasible alternatives are now emerging. In this paper, we introduce a novel spatiotemporal transformer network that predicts important gait parameters from RGB video footage recorded with a single-view camera. Experimental findings on a publicly accessible dataset of patients with cerebral palsy reveal that our suggested approach surpasses existing state-of-the-art models and significantly improves the prediction of general gait metrics (walking speed, gait deviation index (GDI), and maximum knee flexion angle). Additionally, our method requires fewer parameters and reduces the need for manual feature extraction."
        ],
        [
            "Musculoskeletal disorders and cognitive impairments can lead to reduced mobility and mental health problems among patients. Traditional methods for assessing and treating gait rely on expensive optical motion capture systems. However, advances in computer vision and deep learning have led to more affordable and accessible alternatives. In this paper, we propose a novel spatiotemporal transformer network that predicts key gait parameters from RGB video footage captured by a single-view camera. Our experimental results on a publicly available dataset of patients with cerebral palsy show that our proposed approach outperforms existing state-of-the-art models and significantly improves the prediction of general gait metrics (walking speed, gait deviation index (GDI), and maximum knee flexion angle). Additionally, our method requires fewer parameters and reduces the need for manual feature extraction."
        ],
        [
            "Musculoskeletal disorders and cognitive impairments can lead to reduced mobility and mental health problems among patients. Traditional methods for assessing and treating gait rely on expensive optical motion capture systems. However, advances in computer vision and deep learning have led to more affordable and accessible alternatives. In this paper, we propose a novel spatiotemporal transformer network that predicts key gait parameters from RGB video footage captured by a single-view camera. Our experimental results on a publicly available dataset of patients with cerebral palsy show that our proposed approach outperforms existing state-of-the-art models and significantly improves the prediction of general gait metrics (walking speed, gait deviation index (GDI), and maximum knee flexion angle). Additionally, our method requires fewer parameters and reduces the need for manual feature extraction."
        ],
        [
            "Musculoskeletal disorders and cognitive impairments can lead to reduced mobility and mental health problems among patients. Traditional methods for assessing and treating gait rely on expensive optical motion capture systems. However, advances in computer vision and deep learning have led to more affordable and accessible alternatives. In this paper, we propose a novel spatiotemporal transformer network that predicts key gait parameters from RGB video footage captured by a single-view camera. Our experimental results on a publicly available dataset of patients with cerebral palsy show that our proposed approach outperforms existing state-of-the-art models and significantly improves the prediction of general gait metrics (walking speed, gait deviation index (GDI), and maximum knee flexion angle). Additionally, our method requires fewer parameters and reduces the need for manual feature extraction."
        ],
        [
            "Musculoskeletal disorders and cognitive impairments can lead to reduced mobility and mental health problems among patients. Traditional methods for assessing and treating gait rely on expensive optical motion capture systems. However, advances in computer vision and deep learning have led to more affordable and accessible alternatives. In this paper, we propose a novel spatiotemporal transformer network that predicts key gait parameters from RGB video footage captured by a single-view camera. Our experimental results on a publicly available dataset of patients with cerebral palsy show that our proposed approach outperforms existing state-of-the-art models and significantly improves the prediction of general gait metrics (walking speed, gait deviation index (GDI), and maximum knee flexion angle). Additionally, our method requires fewer parameters and reduces the need for manual feature extraction."
        ],
        [
            "Musculoskeletal disorders and cognitive impairments can lead to reduced mobility and mental health problems among patients. Traditional methods for assessing and treating gait rely on expensive optical motion capture systems. However, advances in computer vision and deep learning have led to more affordable and accessible alternatives. In this paper, we propose a novel spatiotemporal transformer network that predicts key gait parameters from RGB video footage captured by a single-view camera. Our experimental results on a publicly available dataset of patients with cerebral palsy show that our proposed approach outperforms existing state-of-the-art models and significantly improves the prediction of general gait metrics (walking speed, gait deviation index (GDI), and maximum knee flexion angle). Additionally, our method requires fewer parameters and reduces the need for manual feature extraction."
        ],
        [
            "Musculoskeletal disorders and cognitive impairments can cause people to lose their ability to move around freely and experience mental health issues. To help these individuals, there are several techniques available for measuring and correcting how they walk. One traditional technique involves using expensive equipment that records the movement of the body using lights and cameras. But with new technology like computer vision and deep learning, it\u2019s possible to create cheaper and easier ways to track how someone walks. In this study, we suggest a new way to use computers to figure out important things about how a person walks just by looking at videos taken with one camera. We tested our idea using videos of patients with cerebral palsy, which is a condition that makes it hard for them to move their bodies. The results showed that our method was better than other methods that are already being used and helped predict things like how fast a person walks, how much their walking is off from normal, and how bent their knees get while they walk. Another good thing about our method is that it doesn\u2019t need as many parts as other methods and doesn\u2019t require as much work to get information from the videos."
        ],
        [
            "Musculoskeletal disorders and cognitive impairments can lead to a loss of mobility and mental health issues. To assist individuals with these conditions, techniques exist for measuring and correcting gait. Traditional methods involve the use of expensive equipment that records body movements using lights and cameras. However, computer vision and deep learning technology now make it possible to create cheaper and easier methods for gait tracking. In this study, we propose a new method for extracting gait parameters from single-camera videos using computer vision. We tested our method on videos of patients with cerebral palsy, a condition that affects movement. The results showed that our method was better than existing methods and could predict important gait parameters such as walking speed, gait deviation, and knee flexion. Our method also has the advantage of requiring fewer components and less processing time compared to other methods."
        ],
        [
            "Musculoskeletal disorders and cognitive impairments can lead to a loss of mobility and mental health issues. To assist individuals with these conditions, techniques exist for measuring and correcting gait. Traditional methods involve the use of expensive equipment that records body movements using lights and cameras. However, computer vision and deep learning technology now make it possible to create cheaper and easier methods for gait tracking. In this study, we propose a new method for extracting gait parameters from single-camera videos using computer vision. We tested our method on videos of patients with cerebral palsy, a condition that affects movement. The results showed that our method was better than existing methods and could predict important gait parameters such as walking speed, gait deviation, and knee flexion. Our method also has the advantage of requiring fewer components and less processing time compared to other methods."
        ],
        [
            "Musculoskeletal disorders and cognitive impairments can lead to a loss of mobility and mental health issues. To assist individuals with these conditions, techniques exist for measuring and correcting gait. Traditional methods involve the use of expensive equipment that records body movements using lights and cameras. However, computer vision and deep learning technology now make it possible to create cheaper and easier methods for gait tracking. In this study, we propose a new method for extracting gait parameters from single-camera videos using computer vision. We tested our method on videos of patients with cerebral palsy, a condition that affects movement. The results showed that our method was better than existing methods and could predict important gait parameters such as walking speed, gait deviation, and knee flexion. Our method also has the advantage of requiring fewer components and less processing time compared to other methods."
        ],
        [
            "Musculoskeletal disorders and cognitive impairments can lead to a loss of mobility and mental health issues. To assist individuals with these conditions, techniques exist for measuring and correcting gait. Traditional methods involve the use of expensive equipment that records body movements using lights and cameras. However, computer vision and deep learning technology now make it possible to create cheaper and easier methods for gait tracking. In this study, we propose a new method for extracting gait parameters from single-camera videos using computer vision. We tested our method on videos of patients with cerebral palsy, a condition that affects movement. The results showed that our method was better than existing methods and could predict important gait parameters such as walking speed, gait deviation, and knee flexion. Our method also has the advantage of requiring fewer components and less processing time compared to other methods."
        ],
        [
            "Musculoskeletal disorders and cognitive impairments can cause a loss of mobility and mental health issues. To help people with these conditions, there are techniques to measure and correct their walking patterns (called gait). Traditional methods use expensive equipment that records body movements using lights and cameras. But now, computer vision and deep learning technology make it possible to create cheaper and easier ways to track gait. In this study, we propose a new method to extract gait information from videos using a single camera and computer vision. We tested our method on videos of patients with cerebral palsy, which affects movement. The results showed that our method was better than existing methods and could predict important gait parameters like walking speed, gait deviation, and knee flexion. Our method also requires fewer components and less processing time than other methods."
        ],
        [
            "People with musculoskeletal disorders or cognitive impairments may lose mobility or develop mental health issues. To help them, techniques have been developed to measure and correct their walking patterns, known as gait analysis. Traditional methods involve expensive equipment that uses lights and cameras to record body movements. However, recent advances in computer vision and deep learning have made it possible to develop cheaper and easier methods for gait analysis. In this study, we propose a new method for extracting gait information from videos using a single camera and computer vision techniques. We tested our method on videos of patients with cerebral palsy, a condition that affects movement. The results showed that our method outperformed existing methods in predicting important gait parameters like walking speed, gait deviation, and knee flexion. Additionally, our method requires fewer components and less processing time than other methods."
        ],
        [
            "People with musculoskeletal disorders or cognitive impairments may lose mobility or develop mental health issues. To help them, techniques have been developed to measure and correct their walking patterns, known as gait analysis. Traditional methods involve expensive equipment that uses lights and cameras to record body movements. However, recent advances in computer vision and deep learning have made it possible to develop cheaper and easier methods for gait analysis. In this study, we propose a new method for extracting gait information from videos using a single camera and computer vision techniques. We tested our method on videos of patients with cerebral palsy, a condition that affects movement. The results showed that our method outperformed existing methods in predicting important gait parameters like walking speed, gait deviation, and knee flexion. Additionally, our method requires fewer components and less processing time than other methods."
        ],
        [
            "People with musculoskeletal disorders or cognitive impairments may lose mobility or develop mental health issues. To help them, techniques have been developed to measure and correct their walking patterns, known as gait analysis. Traditional methods involve expensive equipment that uses lights and cameras to record body movements. However, recent advances in computer vision and deep learning have made it possible to develop cheaper and easier methods for gait analysis. In this study, we propose a new method for extracting gait information from videos using a single camera and computer vision techniques. We tested our method on videos of patients with cerebral palsy, a condition that affects movement. The results showed that our method outperformed existing methods in predicting important gait parameters like walking speed, gait deviation, and knee flexion. Additionally, our method requires fewer components and less processing time than other methods."
        ],
        [
            "People who suffer from musculoskeletal disorders or cognitive impairments often face mobility problems, which can lead to mental health issues. To address this issue, gait analysis techniques have been developed to measure and correct walking patterns. While traditional methods require expensive equipment such as lights and cameras to track body movements, recent developments in computer vision and deep learning have made it possible to develop cheaper and simpler methods for gait analysis. In this study, we propose a new method that utilizes a single camera and computer vision techniques to extract gait information from videos. We tested our method on videos of patients with cerebral palsy, a condition that affects movement. The results showed that our method outperformed existing methods in predicting important gait parameters like walking speed, gait deviation, and knee flexion. Additionally, our method requires fewer components and less processing time than other methods."
        ],
        [
            "Gait analysis is an important tool used to assess and improve walking patterns in people with musculoskeletal disorders or cognitive impairments. These conditions can cause mobility problems, which can lead to mental health issues. Traditional gait analysis techniques require expensive equipment such as lights and cameras to track body movements. However, recent advancements in computer vision and deep learning have made it possible to develop cheaper and simpler methods for gait analysis. In this study, we propose a new method that uses a single camera and computer vision techniques to extract gait information from videos. We tested our method on videos of patients with cerebral palsy, a condition that affects movement. The results showed that our method outperformed existing methods in predicting important gait parameters like walking speed, gait deviation, and knee flexion. Our method also requires fewer components and less processing time compared to other methods. This makes it a promising tool for gait analysis in clinical settings."
        ],
        [
            "Gait analysis is a useful way to look at how people walk and find ways to make it better for those with problems with their muscles or brains. These problems can make it hard to move around and can hurt a person's mind. The old way of looking at how people walk needed expensive things like lights and cameras to watch what the body does. But now, with computers seeing things and learning in deep ways, there are easier and cheaper ways to do this. In this study, we came up with a new way that uses one camera and computer ways to get information about how people walk from videos. We tested our way on videos of people with a problem with their brain called cerebral palsy. The results showed that our way was better at guessing important things about how people walk like how fast they walk, how different their walk is, and how much their knee bends. Our way also needs fewer parts and less time to think about things compared to other ways. This makes it a good tool to use in places where people get medical help."
        ],
        [
            "Gait analysis is a useful method for examining how people walk and identifying ways to improve walking for those with muscle or brain disorders. These disorders can impair mobility and have negative mental health effects. Traditional gait analysis methods require expensive equipment such as lights and cameras to track body movements. However, advances in computer vision and deep learning have made it possible to perform gait analysis using simpler and more affordable methods. In this study, we developed a new method that uses a single camera and computer vision techniques to extract gait information from videos. We evaluated our method on videos of individuals with cerebral palsy, a brain disorder that affects movement. The results showed that our method was accurate in estimating important gait parameters such as walking speed, stride length, and knee flexion angle. Our method also requires fewer components and less computational time compared to other methods. This makes it a suitable tool for clinical applications."
        ],
        [
            "Gait analysis is a useful method for examining how people walk and identifying ways to improve walking for those with muscle or brain disorders. These disorders can impair mobility and have negative mental health effects. Traditional gait analysis methods require expensive equipment such as lights and cameras to track body movements. However, advances in computer vision and deep learning have made it possible to perform gait analysis using simpler and more affordable methods. In this study, we developed a new method that uses a single camera and computer vision techniques to extract gait information from videos. We evaluated our method on videos of individuals with cerebral palsy, a brain disorder that affects movement. The results showed that our method was accurate in estimating important gait parameters such as walking speed, stride length, and knee flexion angle. Our method also requires fewer components and less computational time compared to other methods. This makes it a suitable tool for clinical applications."
        ],
        [
            "Gait analysis is a helpful way to assess how people walk and find ways to enhance walking for those with muscle or brain issues. These disorders can reduce mobility and have negative psychological effects. Traditional gait analysis approaches involve expensive equipment like lights and cameras to track body movements. Nevertheless, developments in computer vision and deep learning have made it possible to conduct gait analysis using simpler and more economical methods. In this study, we created a new method that utilizes a single camera and computer vision techniques to extract gait information from videos. We assessed our method on videos of people with cerebral palsy, a brain disorder that impacts movement. The results showed that our method was precise in estimating crucial gait parameters such as walking speed, stride length, and knee flexion angle. Our method also needs fewer components and less computational time compared to other methods. This makes it a fitting tool for clinical applications."
        ],
        [
            "Gait analysis is a helpful way to assess how people walk and find ways to enhance walking for those with muscle or brain issues. These disorders can reduce mobility and have negative psychological effects. Traditional gait analysis approaches involve expensive equipment like lights and cameras to track body movements. Nevertheless, developments in computer vision and deep learning have made it possible to conduct gait analysis using simpler and more economical methods. In this study, we created a new method that utilizes a single camera and computer vision techniques to extract gait information from videos. We assessed our method on videos of people with cerebral palsy, a brain disorder that impacts movement. The results showed that our method was precise in estimating crucial gait parameters such as walking speed, stride length, and knee flexion angle. Our method also needs fewer components and less computational time compared to other methods. This makes it a fitting tool for clinical applications."
        ],
        [
            "Gait analysis is a helpful way to assess how people walk and find ways to enhance walking for those with muscle or brain issues. These disorders can reduce mobility and have negative psychological effects. Traditional gait analysis approaches involve expensive equipment like lights and cameras to track body movements. Nevertheless, developments in computer vision and deep learning have made it possible to conduct gait analysis using simpler and more economical methods. In this study, we created a new method that utilizes a single camera and computer vision techniques to extract gait information from videos. We assessed our method on videos of people with cerebral palsy, a brain disorder that impacts movement. The results showed that our method was precise in estimating crucial gait parameters such as walking speed, stride length, and knee flexion angle. Our method also needs fewer components and less computational time compared to other methods. This makes it a fitting tool for clinical applications."
        ],
        [
            "Gait analysis is an effective way to evaluate how individuals walk and identify methods to improve their walking for those with muscular or cerebral issues. These disorders can limit mobility and have adverse mental effects. Conventional gait analysis techniques involve utilizing expensive equipment such as lights and cameras to track body motions. However, advancements in computer vision and deep learning have made it possible to conduct gait analysis using simpler and more cost-effective methods. In this study, we developed a new method that employs a single camera and computer vision techniques to extract gait information from videos. We evaluated our method on videos of individuals with cerebral palsy, a cerebral disorder that affects movement. The results showed that our method was accurate in estimating crucial gait parameters such as walking speed, stride length, and knee flexion angle. Our method also requires fewer components and less computational time compared to other methods. This makes it a suitable tool for clinical applications."
        ],
        [
            "Gait analysis has been used to examine how people walk, and to find ways to improve their walking for those with muscle or cerebral problems. These problems can limit movement and have negative mental effects. Traditional gait analysis methods use expensive equipment like lights and cameras to track body movements. But recent advances in computer vision and deep learning have made it possible to do gait analysis with simpler and cheaper methods. In this study, we developed a new method that uses one camera and computer vision techniques to get gait information from videos. We tested our method on videos of people with cerebral palsy, a cerebral problem that affects movement. The results showed that our method was good at estimating important gait parameters like walking speed, stride length, and knee flexion angle. Our method also needs fewer parts and less computer time compared to other methods. This makes it good for clinical use."
        ],
        [
            "Gait analysis is a method used to study how people walk, and to find ways to improve their walking for those with muscle or cerebral problems. These problems can limit movement and have negative mental effects. Traditional gait analysis methods use expensive equipment like lights and cameras to track body movements. But recent advances in computer vision and deep learning have made it possible to do gait analysis with simpler and cheaper methods. In this study, we developed a new method that uses one camera and computer vision techniques to get gait information from videos. We tested our method on videos of people with cerebral palsy, a cerebral problem that affects movement. The results showed that our method was good at estimating important gait parameters like walking speed, stride length, and knee flexion angle. Our method also needs fewer parts and less computer time compared to other methods. This makes it good for clinical use."
        ],
        [
            "Gait analysis is a technique used to analyze the way people walk, and to improve walking in those with muscle or cerebral disorders. These disorders can limit movement and cause negative psychological effects. Traditional gait analysis methods use expensive equipment such as lights and cameras to track body movements. However, recent advancements in computer vision and deep learning have enabled gait analysis to be performed with simpler and cheaper methods. In this study, we developed a new method that uses one camera and computer vision techniques to extract gait information from videos. We tested our method on videos of people with cerebral palsy, a cerebral disorder that affects movement. The results showed that our method was effective in estimating important gait parameters such as walking speed, stride length, and knee flexion angle. Our method also requires fewer components and less computational time compared to other methods, making it suitable for clinical use."
        ],
        [
            "Gait analysis is a process used to evaluate the way individuals walk, and to enhance their movement capabilities in those with muscle or brain-related disorders. These conditions can impede movement and have negative psychological consequences. Traditional gait analysis techniques involve the use of expensive equipment such as lights and cameras to track bodily movements. However, recent advancements in computer vision and deep learning have made it possible to perform gait analysis using simpler and more affordable methods. In this study, we developed a novel method that employs a single camera and computer vision techniques to extract gait information from videos. We tested our method on videos of individuals with cerebral palsy, a brain disorder that affects movement. The results showed that our method was successful in estimating significant gait parameters such as walking speed, stride length, and knee flexion angle. Our method also requires fewer components and less computational time compared to other methods, making it suitable for clinical use."
        ],
        [
            "Gait analysis is a process used to evaluate the way individuals walk, and to enhance their movement capabilities in those with muscle or brain-related disorders. These conditions can impede movement and have negative psychological consequences. Traditional gait analysis techniques involve the use of expensive equipment such as lights and cameras to track bodily movements. However, recent advancements in computer vision and deep learning have made it possible to perform gait analysis using simpler and more affordable methods. In this study, we developed a novel method that employs a single camera and computer vision techniques to extract gait information from videos. We tested our method on videos of individuals with cerebral palsy, a brain disorder that affects movement. The results showed that our method was successful in estimating significant gait parameters such as walking speed, stride length, and knee flexion angle. Our method also requires fewer components and less computational time compared to other methods, making it suitable for clinical use."
        ],
        [
            "Gait analysis is a process used to assess the manner in which individuals walk and improve their mobility in those with disorders related to muscles or the brain. Such conditions can impede movement and lead to psychological consequences. Conventional gait analysis techniques involve the use of costly equipment such as lights and cameras to track bodily movements. Nonetheless, recent progress in computer vision and deep learning has made it possible to perform gait analysis using simpler and more affordable approaches. In this study, we have developed a novel technique that employs a single camera and computer vision methods to extract gait information from videos. We tested our method on videos of individuals with cerebral palsy, a brain disorder that affects movement. The results showed that our method was successful in estimating significant gait parameters such as walking speed, stride length, and knee flexion angle. Our method also requires fewer components and less computational time compared to other methods, making it suitable for clinical use."
        ],
        [
            "Gait analysis is a process used to assess the way that people walk and improve their mobility when they have muscle or brain disorders. These conditions can make it hard to move and can also cause psychological problems. Traditional methods of gait analysis use expensive equipment like lights and cameras to track body movements. However, recent advances in computer vision and deep learning have made it possible to do gait analysis using simpler and less expensive approaches. In this study, we developed a new technique that uses a single camera and computer vision methods to get information about gait from videos. We tested our method on videos of people with cerebral palsy, a brain disorder that affects movement. The results showed that our method worked well for estimating important gait parameters like walking speed, stride length, and knee flexion angle. Our method also needs fewer parts and takes less time to compute compared to other methods, which makes it good for use in clinics."
        ],
        [
            "Gait analysis is a process used to assess the way that people walk and improve their mobility when they have muscle or brain disorders. These conditions can make it hard to move and can also cause psychological problems. Traditional methods of gait analysis use expensive equipment like lights and cameras to track body movements. However, recent advances in computer vision and deep learning have made it possible to do gait analysis using simpler and less expensive approaches. In this study, we developed a new technique that uses a single camera and computer vision methods to get information about gait from videos. We tested our method on videos of people with cerebral palsy, a brain disorder that affects movement. The results showed that our method worked well for estimating important gait parameters like walking speed, stride length, and knee flexion angle. Our method also needs fewer parts and takes less time to compute compared to other methods, which makes it good for use in clinics."
        ],
        [
            "Gait analysis is a method used to evaluate how people walk and help them move better when they have problems with their muscles or brain. These issues can make it hard for people to move around and can also affect their mental health. In the past, people used expensive tools like lights and cameras to watch people's movements. But now, with new ways of looking at things with computers and learning from them, it's possible to use simpler and cheaper ways to do gait analysis. In this study, we came up with a new way to do gait analysis that uses just one camera and ways of looking at things with computers to get information about gait from videos. We tried our method on videos of people who have cerebral palsy, a problem with their brain that makes it hard for them to move. The results showed that our method worked well for figuring out important things about gait, like how fast people were walking, how long their steps were, and how much their knees were bending. Our method also has fewer parts and takes less time to figure things out than other methods, which makes it good for using in places where people go for help with their health."
        ],
        [
            "Gait analysis is a way to study how people walk and help them move better when they have problems with their muscles or brain. These issues can make it hard for people to move around and can also affect their mental health. In the past, people used expensive tools like lights and cameras to watch people's movements. But now, with new ways of looking at things with computers and learning from them, it's possible to use simpler and cheaper ways to do gait analysis. In this study, we came up with a new way to do gait analysis that uses just one camera and ways of looking at things with computers to get information about gait from videos. We tried our method on videos of people who have cerebral palsy, a problem with their brain that makes it hard for them to move. The results showed that our method worked well for figuring out important things about gait, like how fast people were walking, how long their steps were, and how much their knees were bending. Our method also has fewer parts and takes less time to figure things out than other methods, which makes it good for using in places where people go for help with their health."
        ],
        [
            "Gait analysis is a process that is used to study how people walk and to help them move better when they have problems with their muscles or brain. These issues can make it difficult for people to move around and can also impact their mental health. In the past, people used expensive tools such as lights and cameras to monitor people's movements. However, with the help of new computer vision and machine learning techniques, it is now possible to use simpler and cheaper methods to perform gait analysis. In this study, we developed a new method of gait analysis that uses a single camera and computer vision techniques to extract gait information from videos. We tested our method on videos of people with cerebral palsy, a condition that affects the brain and makes it difficult for people to move. The results showed that our method was effective in determining important gait parameters, such as walking speed, step length, and knee flexion. Our method also has fewer components and requires less time to calculate than other methods, making it suitable for use in clinical settings."
        ],
        [
            "Gait analysis is a procedure used to evaluate the way individuals walk and help them improve their gait when they have muscle or neurological conditions. These conditions can make it difficult for individuals to move around and also affect their mental health. In the past, people used expensive tools such as lights and cameras to monitor people's movements. However, with the help of new computer vision and machine learning techniques, it is now possible to use simpler and cheaper methods to perform gait analysis. In this study, we developed a new method of gait analysis that uses a single camera and computer vision techniques to extract gait information from videos. We tested our method on videos of people with cerebral palsy, a condition that affects the brain and makes it difficult for people to move. The results showed that our method was effective in determining important gait parameters, such as walking speed, step length, and knee flexion. Our method also has fewer components and requires less time to calculate than other methods, making it suitable for use in clinical settings."
        ],
        [
            "Gait analysis is a procedure used to evaluate the way individuals walk and help them improve their gait when they have muscle or neurological conditions. These conditions can make it difficult for individuals to move around and also affect their mental health. In the past, people used expensive tools such as lights and cameras to monitor people's movements. However, with the help of new computer vision and machine learning techniques, it is now possible to use simpler and cheaper methods to perform gait analysis. In this study, we developed a new method of gait analysis that uses a single camera and computer vision techniques to extract gait information from videos. We tested our method on videos of people with cerebral palsy, a condition that affects the brain and makes it difficult for people to move. The results showed that our method was effective in determining important gait parameters, such as walking speed, step length, and knee flexion. Our method also has fewer components and requires less time to calculate than other methods, making it suitable for use in clinical settings."
        ],
        [
            "Gait analysis is a procedure that is used to evaluate how individuals walk and help them improve their walking pattern if they have muscle or neurological conditions. These conditions can make it difficult for individuals to move around and can also have a negative impact on their mental health. In the past, people used expensive tools such as lights and cameras to monitor people's movements. However, with the help of new computer vision and machine learning techniques, it is now possible to use simpler and cheaper methods to perform gait analysis. In this study, we developed a new method of gait analysis that uses a single camera and computer vision techniques to extract gait information from videos. We tested our method on videos of people with cerebral palsy, a condition that affects the brain and makes it difficult for people to move. The results showed that our method was effective in determining important gait parameters, such as walking speed, step length, and knee flexion. Our method also has fewer components and requires less time to calculate than other methods, making it suitable for use in clinical settings."
        ],
        [
            "Gait analysis is a procedure that is used to assess how individuals walk and help them improve their walking pattern if they have muscle or neurological conditions. These conditions can make it difficult for individuals to move around and can also have a negative impact on their mental health. In the past, people used expensive tools such as lights and cameras to monitor people's movements. However, with the help of new computer vision and machine learning techniques, it is now possible to use simpler and cheaper methods to perform gait analysis. In this study, we developed a new method of gait analysis that uses a single camera and computer vision techniques to extract gait information from videos. We tested our method on videos of people with cerebral palsy, a condition that affects the brain and makes it difficult for people to move. The results showed that our method was effective in determining important gait parameters, such as walking speed, step length, and knee flexion. Our method also has fewer components and requires less time to calculate than other methods, making it suitable for use in clinical settings."
        ],
        [
            "Gait analysis is a procedure that involves evaluating the way a person walks. It can help people who have muscle or neurological issues improve their walking patterns. These conditions can make it hard for people to move around and can also affect their mental health. In the past, people used expensive equipment like lights and cameras to monitor movement. But now, with new computer vision and machine learning techniques, it's possible to use simpler and cheaper methods for gait analysis. In this study, we developed a new method of gait analysis using a single camera and computer vision techniques to get gait information from videos. We tested our method on videos of people with cerebral palsy, a condition that affects the brain and makes movement difficult. The results showed that our method was good at figuring out important gait parameters like walking speed, step length, and knee flexion. Our method has fewer parts and takes less time to calculate than other methods, so it's suitable for use in clinical settings."
        ],
        [
            "Gait analysis is the evaluation of an individual's walking pattern. It can help people with muscular or neurological disorders improve their gait patterns. These conditions can make it difficult for people to move around and can also impact their mental health. In the past, people used expensive equipment such as lights and cameras to monitor movement. However, with recent advances in computer vision and machine learning, simpler and cheaper methods for gait analysis are now possible. In this study, we developed a new method for gait analysis that uses a single camera and computer vision techniques to extract gait information from videos. We tested our method on videos of people with cerebral palsy, a condition that affects the brain and makes movement difficult. The results showed that our method was effective in determining key gait parameters such as walking speed, step length, and knee flexion. Our method has fewer components and requires less computation time than other methods, making it suitable for use in clinical settings."
        ]
    ]
}