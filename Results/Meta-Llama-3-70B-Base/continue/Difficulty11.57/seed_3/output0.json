{
    "adjacency_matrix": [
        [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0
        ]
    ],
    "prompt_init": [
        "You will receive a text. Your task is to continue this text. Just output your new text, nothing else. Here is the text:"
    ],
    "prompt_update": [
        "You will receive a text. Your task is to continue this text. Just output your new text, nothing else. Here is the text:"
    ],
    "personality_list": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
    ],
    "format_prompt": [
        ""
    ],
    "initial_story": "having the potential for high speed, high throughput, and low energy cost,optical neural networks (onns) have emerged as a promising candidate foraccelerating deep learning tasks. in conventional onns, light amplitudes aremodulated at the input and detected at the output. however, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. to address this issue, in this paper, we propose aframework called oplixnet to compress the areas of onns by modulating inputimage data into the amplitudes and phase parts of light signals. the input andoutput parts of the onns are redesigned to make full use of both amplitude andphase information. moreover, mutual learning across different onn structures isintroduced to maintain the accuracy. experimental results demonstrate that theproposed framework significantly reduces the areas of onns with the accuracywithin an acceptable range. for instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (fcnn) and 74.88% area isreduced with a 2.38% accuracy decrease on resnet-32. ",
    "stories": [
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32."
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32."
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ],
        [
            "Having the potential for high speed, high throughput, and low energy cost,optical neural networks (ONNs) have emerged as a promising candidate foraccelerating deep learning tasks. In conventional ONNs, light amplitudes aremodulated at the input and detected at the output. However, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. To address this issue, in this paper, we propose aframework called OPLIXNET to compress the areas of ONNs by modulating inputimage data into the amplitudes and phase parts of light signals. The input andoutput parts of the ONNs are redesigned to make full use of both amplitude andphase information. Moreover, mutual learning across different ONN structures isintroduced to maintain the accuracy. Experimental results demonstrate that theproposed framework significantly reduces the areas of ONNs with the accuracywithin an acceptable range. For instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (FCNN) and 74.88% area isreduced with a 2.38% accuracy decrease on ResNet-32.\n\nIn this section, we first introduce the overall framework of OPLIXNET and thendescribe each part in detail. The overall framework of OPLIXNET is shown inFig. 1. It consists of four main components: input modulator, ONN processor,phase detector, and output modulator. The input modulator is used to modulateinput image data into the amplitudes and phase parts of light signals. The ONNprocessor is used to process the light signals. The phase detector is used todetect the phase of the light signals. The output modulator is used to modulateoutput light signals into output image data.\n\nThe input modulator is shown in Fig. 2. It consists of an amplitude modulatorand a phase modulator. The amplitude modulator is used to modulate theamplitude of the light signals. The phase modulator is used to modulate thephase of the light signals. The ONN processor is shown in Fig. 3. It consists ofa series of optical layers. Each optical layer is composed of a number ofoptical neurons. The optical neurons are used to process the light signals.The phase detector is shown in Fig. 4. It consists of a number of opticalneurons. The optical neurons are used to detect the phase of the lightsignals. The output modulator is shown in Fig. 5. It consists of an amplitude"
        ]
    ]
}