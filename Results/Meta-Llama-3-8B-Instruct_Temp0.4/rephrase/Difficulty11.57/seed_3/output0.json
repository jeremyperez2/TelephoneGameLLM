{
    "adjacency_matrix": [
        [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0
        ]
    ],
    "prompt_init": [
        "You will receive a text. Your task is to rephrase this text without modifying its meaning. Just output your new text, nothing else. Here is the text:"
    ],
    "prompt_update": [
        "You will receive a text. Your task is to rephrase this text without modifying its meaning. Just output your new text, nothing else. Here is the text:"
    ],
    "personality_list": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
    ],
    "format_prompt": [
        ""
    ],
    "initial_story": "having the potential for high speed, high throughput, and low energy cost,optical neural networks (onns) have emerged as a promising candidate foraccelerating deep learning tasks. in conventional onns, light amplitudes aremodulated at the input and detected at the output. however, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. to address this issue, in this paper, we propose aframework called oplixnet to compress the areas of onns by modulating inputimage data into the amplitudes and phase parts of light signals. the input andoutput parts of the onns are redesigned to make full use of both amplitude andphase information. moreover, mutual learning across different onn structures isintroduced to maintain the accuracy. experimental results demonstrate that theproposed framework significantly reduces the areas of onns with the accuracywithin an acceptable range. for instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (fcnn) and 74.88% area isreduced with a 2.38% accuracy decrease on resnet-32. ",
    "stories": [
        [
            "Optical neural networks (ONNs) have gained attention due to their potential for high-speed processing, high throughput, and low energy consumption. In traditional ONNs, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite holding valuable computing information. To address this limitation, we introduce OplixNet, a framework that compresses ONNs by separating input image data into amplitude and phase components of light signals. The input and output parts of the ONNs are redesigned to fully utilize both amplitude and phase information. Additionally, mutual learning across different ONN structures is incorporated to maintain accuracy. Experimental results show that OplixNet significantly reduces ONN areas while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks (FCNN) and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have garnered attention due to their potential for rapid processing, high throughput, and low energy consumption. In traditional ONNs, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable computational information. To address this limitation, we propose OplixNet, a framework that compresses ONNs by separating input image data into amplitude and phase components of light signals. The input and output parts of the ONNs are redesigned to fully utilize both amplitude and phase information. Furthermore, mutual learning across different ONN structures is incorporated to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces ONN areas while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their ability to process information quickly, handle a large volume of data, and conserve energy. In traditional optical neural networks, the intensity of light signals is adjusted at the input and measured at the output, but the phase of the light signals has been overlooked, despite holding valuable computational information. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output components of the optical neural networks are redesigned to fully utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is incorporated to maintain accuracy. Experimental results show that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their speed, capacity to handle large data volumes, and energy efficiency. In traditional optical neural networks, light signal intensity is adjusted at the input and measured at the output, but the phase of the light signals has been overlooked, despite containing valuable computational information. To address this limitation, we propose OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output components of the optical neural networks are redesigned to fully utilize both amplitude and phase information. Moreover, mutual learning across different optical neural network structures is incorporated to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their speed, ability to handle large data volumes, and energy efficiency. In traditional optical neural networks, the intensity of light signals is adjusted at the input and measured at the output, but the phase of the light signals has been overlooked, despite containing valuable computational information. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output components of the optical neural networks are redesigned to fully utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is incorporated to maintain accuracy. Experimental results show that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their speed, capacity to handle large data volumes, and energy efficiency. In traditional optical neural networks, the intensity of light signals is adjusted at the input and measured at the output, but the phase of the light signals has been overlooked, despite containing valuable computational information. To address this limitation, we present OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output components of the optical neural networks are redesigned to fully utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is incorporated to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained favor due to their rapid processing, ability to handle large datasets, and energy efficiency. In traditional optical neural networks, the intensity of light signals is adjusted at the input and measured at the output, but the phase of the light signals has been overlooked, despite containing valuable computational information. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output components of the optical neural networks are redesigned to fully utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is incorporated to maintain accuracy. Experimental results show that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their rapid processing capabilities, ability to handle large datasets, and energy efficiency. In traditional optical neural networks, the intensity of light signals is adjusted at the input and measured at the output, but the phase of the light signals has been overlooked, despite containing valuable computational information. To address this limitation, we propose OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output components of the optical neural networks are redesigned to fully utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is incorporated to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their rapid processing capabilities, ability to handle large datasets, and energy efficiency. In traditional optical neural networks, the intensity of light signals is adjusted at the input and measured at the output, but the phase of the light signals has been overlooked, despite containing valuable computational information. To address this limitation, we propose OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output components of the optical neural networks are redesigned to fully utilize both amplitude and phase information. Moreover, mutual learning across different optical neural network structures is incorporated to maintain accuracy. Experimental results show that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their rapid processing capabilities, ability to handle large datasets, and energy efficiency. In traditional optical neural networks, the intensity of light signals is adjusted at the input and measured at the output, but the phase of the light signals has been overlooked, despite containing valuable computational information. To address this limitation, we propose OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output components of the optical neural networks are redesigned to fully utilize both amplitude and phase information. Moreover, mutual learning across different optical neural network structures is incorporated to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their rapid processing capabilities, ability to handle large datasets, and energy efficiency. In traditional optical neural networks, the intensity of light signals is adjusted at the input and measured at the output, but the phase of the light signals has been overlooked, despite containing valuable computational information. To address this limitation, we propose OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output components of the optical neural networks are redesigned to fully utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is incorporated to maintain accuracy. Experimental results show that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their rapid processing capabilities, ability to handle large datasets, and energy efficiency. In traditional optical neural networks, the intensity of light signals is adjusted at the input and measured at the output, but the phase of the light signals has been overlooked, despite containing valuable computational information. To address this limitation, we propose OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output components of the optical neural networks are redesigned to fully utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is incorporated to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their rapid processing capabilities, ability to handle large datasets, and energy efficiency. In traditional optical neural networks, the intensity of light signals is adjusted at the input and measured at the output, but the phase of the light signals has been overlooked, despite containing valuable computational information. To address this limitation, we introduce OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output components of the optical neural networks are redesigned to fully utilize both amplitude and phase information. Moreover, mutual learning across different optical neural network structures is incorporated to maintain accuracy. Experimental results show that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their rapid processing capabilities, ability to handle large datasets, and energy efficiency. In traditional optical neural networks, the intensity of light signals is adjusted at the input and measured at the output, but the phase of the light signals has been overlooked, despite containing valuable computational information. To address this limitation, we introduce OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output components of the optical neural networks are redesigned to fully utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is incorporated to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their rapid processing capabilities, ability to handle large datasets, and energy efficiency. In traditional optical neural networks, the intensity of light signals is adjusted at the input and measured at the output, but the phase of the light signals has been overlooked, despite containing valuable computational information. To address this limitation, we present OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output components of the optical neural networks are redesigned to fully utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is incorporated to maintain accuracy. Experimental results show that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their swift processing capabilities, ability to handle large datasets, and energy efficiency. In traditional optical neural networks, the intensity of light signals is adjusted at the input and measured at the output, but the phase of the light signals has been overlooked, despite holding valuable computational information. To address this limitation, we introduce OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output components of the optical neural networks are redesigned to fully utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is incorporated to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their rapid processing speed, ability to handle large datasets, and energy efficiency. Traditionally, optical neural networks adjust the intensity of light signals at the input and measure it at the output, but the phase of the light signals has been overlooked, despite holding valuable computational potential. To address this limitation, we introduce OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output components of the optical neural networks are redesigned to fully utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is incorporated to maintain accuracy. Experimental results show that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their rapid processing speed, ability to handle large datasets, and energy efficiency. Historically, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, but the phase of the light signals has been overlooked, despite holding significant computational potential. To address this limitation, we introduce OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework redesigns the input and output components of optical neural networks to fully utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is incorporated to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their rapid processing speed, capacity to handle large datasets, and energy efficiency. Traditionally, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, neglecting the phase of light signals despite their significant computational potential. To overcome this limitation, we introduce OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is incorporated to preserve accuracy. Experimental results show that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their rapid processing speed, ability to handle large datasets, and energy efficiency. Historically, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, overlooking the phase of light signals despite their significant computational potential. To address this limitation, we propose OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is incorporated to preserve accuracy. Experimental results demonstrate that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their rapid processing speed, ability to handle large datasets, and energy efficiency. Historically, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, neglecting the phase of light signals despite their significant computational potential. To address this limitation, we introduce OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is incorporated to preserve accuracy. Experimental results show that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their rapid processing speed, capacity to handle large datasets, and energy efficiency. Traditionally, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, overlooking the phase of light signals despite their significant computational potential. To address this limitation, we introduce OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is incorporated to preserve accuracy. Experimental results demonstrate that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their rapid processing speed, ability to handle large datasets, and energy efficiency. Historically, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, neglecting the phase of light signals despite their significant computational potential. To overcome this limitation, we present OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Moreover, mutual learning across different optical neural network structures is incorporated to preserve accuracy. Experimental results show that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their rapid processing speed, ability to handle large datasets, and energy efficiency. Traditionally, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, overlooking the phase of light signals despite their significant computational potential. To address this limitation, we introduce OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is incorporated to preserve accuracy. Experimental results demonstrate that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their fast processing speed, ability to handle large datasets, and energy efficiency. Traditionally, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, neglecting the phase of light signals despite their significant computational potential. To address this limitation, we propose OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is incorporated to preserve accuracy. Experimental results show that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their rapid processing speed, capacity to handle large datasets, and energy efficiency. Historically, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, overlooking the phase of light signals despite their substantial computational potential. To address this limitation, we introduce OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network architectures is incorporated to preserve accuracy. Experimental results demonstrate that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their fast processing speed, ability to handle large datasets, and energy efficiency. Traditionally, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, neglecting the phase of light signals despite their significant computational potential. To overcome this limitation, we present OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network architectures is incorporated to preserve accuracy. Experimental results show that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their rapid processing speed, ability to handle large datasets, and energy efficiency. Historically, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, overlooking the phase of light signals despite their substantial computational potential. To address this limitation, we introduce OplixNet, a framework that optimizes optical neural networks by dividing input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network architectures is incorporated to preserve accuracy. Experimental results demonstrate that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their fast processing speed, ability to handle large datasets, and energy efficiency. Traditionally, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, neglecting the phase of light signals despite their significant computational potential. To address this limitation, we propose OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network architectures is incorporated to preserve accuracy. Experimental results show that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their rapid processing speed, ability to handle large datasets, and energy efficiency. Traditionally, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, overlooking the phase of light signals despite its substantial computational potential. To address this limitation, we introduce OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Moreover, mutual learning across different optical neural network architectures is incorporated to preserve accuracy. Experimental results demonstrate that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their rapid processing speed, ability to handle large datasets, and energy efficiency. Traditionally, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, neglecting the phase of light signals despite its significant computational potential. To address this limitation, we introduce OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network architectures is incorporated to maintain accuracy. Experimental results show that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their rapid processing speed, ability to handle large datasets, and energy efficiency. Historically, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, overlooking the phase of light signals despite its significant computational potential. To address this limitation, we present OplixNet, a framework that optimizes optical neural networks by dividing input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network architectures is incorporated to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their rapid processing speed, ability to handle large datasets, and energy efficiency. Historically, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, neglecting the phase of light signals despite its significant computational potential. To address this limitation, we introduce OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network architectures is incorporated to maintain accuracy. Experimental results show that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their swift processing speed, ability to handle large datasets, and energy efficiency. Traditionally, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, overlooking the phase of light signals despite its substantial computational potential. To overcome this limitation, we present OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully leverage both amplitude and phase information. Furthermore, mutual learning across various optical neural network architectures is integrated to preserve accuracy. Experimental findings demonstrate that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their fast processing speed, ability to handle large datasets, and energy efficiency. Historically, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, neglecting the phase of light signals despite its significant computational potential. To address this limitation, we introduce OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Additionally, mutual learning across various optical neural network architectures is integrated to preserve accuracy. Experimental results show that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their rapid processing speed, capacity to handle large datasets, and energy efficiency. Traditionally, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, overlooking the phase of light signals despite its substantial computational potential. To address this limitation, we present OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Furthermore, mutual learning across various optical neural network architectures is integrated to preserve accuracy. Experimental results demonstrate that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their fast processing speed, ability to handle large datasets, and energy efficiency. Historically, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, neglecting the phase of light signals despite its significant computational potential. To address this limitation, we introduce OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Additionally, mutual learning across various optical neural network architectures is integrated to preserve accuracy. Experimental results show that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their rapid processing speed, capacity to handle large datasets, and energy efficiency. Traditionally, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, overlooking the significance of light signal phase despite its substantial computational potential. To address this limitation, we present OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Moreover, mutual learning across various optical neural network architectures is integrated to preserve accuracy. Experimental results demonstrate that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their fast processing speed, ability to handle large datasets, and energy efficiency. Historically, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, neglecting the importance of light signal phase despite its significant computational potential. To address this limitation, we introduce OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Additionally, mutual learning across various optical neural network architectures is integrated to preserve accuracy. Experimental results show that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their rapid processing speed, ability to handle large datasets, and energy efficiency. Traditionally, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, overlooking the significance of light signal phase despite its substantial computational potential. To address this limitation, we propose OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Moreover, mutual learning across various optical neural network architectures is integrated to preserve accuracy. Experimental results demonstrate that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their fast processing speed, ability to handle large datasets, and energy efficiency. Historically, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, neglecting the significance of light signal phase despite its substantial computational potential. To address this limitation, we propose OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Furthermore, mutual learning across various optical neural network architectures is integrated to preserve accuracy. Experimental results show that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their swift processing speed, capacity to handle large datasets, and energy efficiency. Traditionally, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, overlooking the significance of light signal phase despite its substantial computational potential. To address this limitation, we introduce OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Additionally, mutual learning across various optical neural network architectures is integrated to preserve accuracy. Experimental results demonstrate that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their fast processing speed, ability to handle large datasets, and energy efficiency. Historically, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, overlooking the importance of light signal phase despite its significant computational potential. To address this limitation, we present OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Moreover, mutual learning across various optical neural network architectures is integrated to preserve accuracy. Experimental results show that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their rapid processing speed, capacity to handle large datasets, and energy efficiency. Traditionally, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, neglecting the significance of light signal phase despite its substantial computational potential. To address this limitation, we introduce OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Additionally, mutual learning across various optical neural network architectures is integrated to preserve accuracy. Experimental results demonstrate that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their rapid processing speed, ability to handle large datasets, and energy efficiency. Historically, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, overlooking the significance of light signal phase despite its significant computational potential. To address this limitation, we present OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Furthermore, mutual learning across various optical neural network architectures is integrated to preserve accuracy. Experimental results show that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained favor due to their rapid processing speed, ability to handle large datasets, and energy efficiency. Historically, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, neglecting the significance of light signal phase despite its substantial computational potential. To address this limitation, we introduce OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Additionally, mutual learning across various optical neural network architectures is integrated to preserve accuracy. Experimental results demonstrate that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their rapid processing speed, ability to handle large datasets, and energy efficiency. Traditionally, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, overlooking the importance of light signal phase despite its substantial computational potential. To address this limitation, we propose OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Furthermore, mutual learning across various optical neural network architectures is integrated to maintain accuracy. Experimental results show that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their rapid processing speed, ability to handle large datasets, and energy efficiency. Historically, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, neglecting the significance of light signal phase despite its substantial computational potential. To address this limitation, we propose OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Additionally, mutual learning across various optical neural network architectures is integrated to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their fast processing speed, ability to handle large datasets, and energy efficiency. Traditionally, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, overlooking the significance of light signal phase despite its substantial computational potential. To address this limitation, we introduce OplixNet, a framework that optimizes optical neural networks by separating input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Furthermore, mutual learning across various optical neural network architectures is integrated to maintain accuracy. Experimental results show that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained attention due to their rapid processing speed, ability to handle large datasets, and energy efficiency. Historically, optical neural networks have focused on adjusting light signal intensity at the input and measuring it at the output, neglecting the significance of light signal phase despite its substantial computational potential. To address this limitation, we present OplixNet, a framework that optimizes optical neural networks by dividing input image data into amplitude and phase components of light signals. The framework reconfigures the input and output components of optical neural networks to fully utilize both amplitude and phase information. Additionally, mutual learning across various optical neural network architectures is integrated to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area required for optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, accompanied by accuracy decreases of 0.33% and 2.38%."
        ]
    ]
}