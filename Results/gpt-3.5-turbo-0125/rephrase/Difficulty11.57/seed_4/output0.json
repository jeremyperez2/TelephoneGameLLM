{
    "adjacency_matrix": [
        [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0
        ]
    ],
    "prompt_init": [
        "You will receive a text. Your task is to rephrase this text without modifying its meaning. Just output your new text, nothing else. Here is the text:"
    ],
    "prompt_update": [
        "You will receive a text. Your task is to rephrase this text without modifying its meaning. Just output your new text, nothing else. Here is the text:"
    ],
    "personality_list": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
    ],
    "format_prompt": [
        ""
    ],
    "initial_story": "having the potential for high speed, high throughput, and low energy cost,optical neural networks (onns) have emerged as a promising candidate foraccelerating deep learning tasks. in conventional onns, light amplitudes aremodulated at the input and detected at the output. however, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. to address this issue, in this paper, we propose aframework called oplixnet to compress the areas of onns by modulating inputimage data into the amplitudes and phase parts of light signals. the input andoutput parts of the onns are redesigned to make full use of both amplitude andphase information. moreover, mutual learning across different onn structures isintroduced to maintain the accuracy. experimental results demonstrate that theproposed framework significantly reduces the areas of onns with the accuracywithin an acceptable range. for instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (fcnn) and 74.88% area isreduced with a 2.38% accuracy decrease on resnet-32. ",
    "stories": [
        [
            "Optical neural networks (ONNs) have the potential to enhance deep learning tasks due to their high speed, high throughput, and low energy cost. Traditional ONNs modulate light amplitudes at the input and detect them at the output, but they often overlook the importance of light phases, which can also convey valuable information. To address this issue, we introduce a framework called OplixNet in this study. OplixNet compresses ONNs by utilizing both amplitude and phase components of light signals to modulate input image data. The input and output sections of ONNs are redesigned to leverage both amplitude and phase information, and mutual learning between different ONN structures is incorporated to maintain accuracy. Experimental findings show that OplixNet significantly reduces the size of ONNs while keeping accuracy within an acceptable range. For example, a 75.03% reduction in area is achieved with only a 0.33% drop in accuracy for fully connected neural networks (FCNN), and a 74.88% decrease in area is attained with a 2.38% accuracy decrease for ResNet-32."
        ],
        [
            "ONNs can enhance deep learning tasks with their high speed, throughput, and low energy cost. While traditional ONNs focus on modulating light amplitudes, they often overlook the importance of light phases. Introducing OplixNet, a framework that compresses ONNs by utilizing both amplitude and phase components of light signals to modulate input data. Redesigning the input and output sections of ONNs to leverage both amplitude and phase information, and incorporating mutual learning between different ONN structures to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces ONN size while maintaining accuracy, such as achieving a 75.03% reduction in area with only a 0.33% drop in accuracy for FCNN, and a 74.88% decrease in area with a 2.38% accuracy decrease for ResNet-32."
        ],
        [
            "OplixNet introduces a novel framework for compressing ONNs by utilizing both amplitude and phase components of light signals to modulate input data, enhancing deep learning tasks with high speed, throughput, and low energy cost. By redesigning the input and output sections of ONNs to leverage both amplitude and phase information, and incorporating mutual learning between different ONN structures, OplixNet significantly reduces ONN size while maintaining accuracy. Experimental results show a 75.03% reduction in area with only a 0.33% drop in accuracy for FCNN, and a 74.88% decrease in area with a 2.38% accuracy decrease for ResNet-32 compared to traditional ONNs that focus solely on modulating light amplitudes."
        ],
        [
            "OplixNet presents a new method for compressing ONNs using both the amplitude and phase of light signals to modulate input data, improving deep learning tasks with increased speed, efficiency, and reduced energy consumption. By optimizing the input and output sections of ONNs to utilize amplitude and phase information, as well as fostering mutual learning between different ONN structures, OplixNet achieves significant ONN size reduction while maintaining accuracy. Experimental findings demonstrate a 75.03% decrease in area with only a 0.33% accuracy drop for FCNN, and a 74.88% reduction in area with a 2.38% decrease in accuracy for ResNet-32 compared to traditional ONNs that only focus on modulating light amplitudes."
        ],
        [
            "OplixNet introduces a novel approach to compressing ONNs by leveraging both the amplitude and phase of light signals to modulate input data, resulting in enhanced speed, efficiency, and decreased energy usage in deep learning tasks. Through optimizing the input and output parts of ONNs to incorporate amplitude and phase details, and promoting knowledge sharing among various ONN structures, OplixNet achieves considerable reduction in ONN size while preserving accuracy. Experimental results show a 75.03% decrease in area with only a 0.33% accuracy decline for FCNN, and a 74.88% reduction in area with a 2.38% accuracy drop for ResNet-32 compared to traditional ONNs focusing solely on modulating light amplitudes."
        ],
        [
            "OplixNet presents a new method of compressing ONNs by using both the amplitude and phase of light signals to modify input data, leading to improved speed, efficiency, and lower energy consumption in deep learning tasks. By optimizing the input and output sections of ONNs to include amplitude and phase information, as well as promoting knowledge sharing among different ONN structures, OplixNet achieves significant reduction in ONN size while maintaining accuracy. Experimental findings demonstrate a 75.03% decrease in area with only a 0.33% accuracy decrease for FCNN, and a 74.88% area reduction with a 2.38% accuracy decrease for ResNet-32 compared to conventional ONNs that only focus on modulating light amplitudes."
        ],
        [
            "OplixNet introduces a novel approach to compressing ONNs by utilizing both the amplitude and phase of light signals to adjust input data. This results in enhanced speed, efficiency, and decreased energy consumption in deep learning tasks. Through optimizing the input and output sections of ONNs to incorporate amplitude and phase information and encouraging knowledge sharing among various ONN structures, OplixNet achieves a substantial reduction in ONN size while preserving accuracy. Experimental results show a 75.03% decrease in area with a mere 0.33% accuracy decrease for FCNN, and a 74.88% reduction in area with a 2.38% accuracy decrease for ResNet-32 compared to traditional ONNs that solely focus on modulating light amplitudes."
        ],
        [
            "OplixNet introduces a new method for compressing ONNs by using both the amplitude and phase of light signals to adjust input data. This leads to improved speed, efficiency, and lower energy consumption in deep learning tasks. By optimizing the input and output sections of ONNs to include amplitude and phase information and promoting knowledge sharing among different ONN structures, OplixNet achieves a significant decrease in ONN size while maintaining accuracy. Experimental results demonstrate a 75.03% decrease in area with only a 0.33% accuracy decrease for FCNN, and a 74.88% reduction in area with a 2.38% accuracy decrease for ResNet-32 compared to traditional ONNs that focus solely on modulating light amplitudes."
        ],
        [
            "OplixNet has developed a novel approach to compressing ONNs by utilizing the amplitude and phase of light signals to adjust input data, resulting in enhanced speed, efficiency, and reduced energy consumption for deep learning tasks. Through optimizing the input and output sections of ONNs to incorporate amplitude and phase information, as well as encouraging knowledge sharing among different ONN structures, OplixNet successfully reduces the size of ONNs significantly while maintaining accuracy. Experimental findings show a 75.03% decrease in area with only a 0.33% accuracy decrease for FCNN, and a 74.88% reduction in area with a 2.38% accuracy decrease for ResNet-32, as compared to traditional ONNs that focus solely on modulating light amplitudes."
        ],
        [
            "OplixNet has devised an innovative method to compress ONNs by using the amplitude and phase of light signals to adjust input data. This results in improved speed, efficiency, and decreased energy usage for deep learning tasks. By optimizing the input and output sections of ONNs to include amplitude and phase data, as well as promoting knowledge sharing among various ONN structures, OplixNet effectively reduces the size of ONNs significantly while maintaining accuracy. Experimental results demonstrate a 75.03% decrease in area with just a 0.33% accuracy decline for FCNN, and a 74.88% area reduction with a 2.38% accuracy decrease for ResNet-32, compared to traditional ONNs that only focus on modulating light amplitudes."
        ],
        [
            "OplixNet has come up with a new way to compress ONNs by using the amplitude and phase of light signals to adjust input data, leading to faster processing, improved efficiency, and reduced energy consumption for deep learning tasks. By optimizing the input and output sections of ONNs to incorporate amplitude and phase data and encouraging knowledge sharing among different ONN structures, OplixNet significantly reduces the size of ONNs while still maintaining accuracy. Experimental findings show a 75.03% decrease in area with just a 0.33% accuracy decline for FCNN, and a 74.88% reduction in area with a 2.38% accuracy decrease for ResNet-32, in comparison to traditional ONNs that only focus on modulating light amplitudes."
        ],
        [
            "OplixNet has developed a novel method for compressing ONNs by utilizing the amplitude and phase of light signals to modify input data. This innovative approach results in faster processing, enhanced efficiency, and lower energy consumption for deep learning tasks. Through optimizing the input and output components of ONNs to include amplitude and phase data, as well as promoting knowledge sharing among different ONN structures, OplixNet effectively diminishes the size of ONNs while still ensuring accuracy. Experimental results indicate a 75.03% decrease in area with only a 0.33% accuracy decline for FCNN, and a 74.88% reduction in area with a 2.38% accuracy decrease for ResNet-32, when compared to conventional ONNs that solely concentrate on modulating light amplitudes."
        ],
        [
            "OplixNet has created an innovative technique to compress ONNs by utilizing the amplitude and phase of light signals to adjust input data. This new method leads to quicker processing, improved efficiency, and reduced energy usage for deep learning tasks. By optimizing the input and output parts of ONNs to incorporate amplitude and phase data, as well as encouraging knowledge sharing among different ONN structures, OplixNet effectively reduces the size of ONNs while maintaining accuracy. Experimental findings show a 75.03% decrease in area with only a 0.33% accuracy decline for FCNN, and a 74.88% reduction in area with a 2.38% accuracy decrease for ResNet-32, compared to traditional ONNs focusing solely on modulating light amplitudes."
        ],
        [
            "OplixNet has developed an innovative method for compressing ONNs by using the amplitude and phase of light signals to adjust input data. This new approach results in faster processing, improved efficiency, and lower energy consumption for deep learning tasks. By optimizing the input and output components of ONNs to include amplitude and phase data, as well as promoting knowledge sharing among different ONN structures, OplixNet effectively reduces the size of ONNs while maintaining accuracy. Experimental results demonstrate a 75.03% decrease in area with only a 0.33% accuracy decline for FCNN, and a 74.88% reduction in area with a 2.38% accuracy decrease for ResNet-32, compared to traditional ONNs that only focus on modulating light amplitudes."
        ],
        [
            "OplixNet has devised an innovative technique to compress ONNs by utilizing the amplitude and phase of light signals to adjust input data. This novel approach leads to quicker processing, enhanced efficiency, and reduced energy consumption for deep learning tasks. By optimizing the input and output components of ONNs to incorporate amplitude and phase data, as well as encouraging knowledge sharing among various ONN structures, OplixNet effectively shrinks the size of ONNs while preserving accuracy. Experimental findings show a 75.03% decrease in area with just a 0.33% accuracy decline for FCNN, and a 74.88% decrease in area with a 2.38% accuracy decrease for ResNet-32, compared to traditional ONNs that solely focus on modulating light amplitudes."
        ],
        [
            "OplixNet has come up with a new method to compress ONNs by using the amplitude and phase of light signals to adjust input data. This innovative approach results in faster processing, improved efficiency, and lower energy usage for deep learning tasks. By optimizing the input and output components of ONNs to include amplitude and phase data, as well as promoting knowledge sharing among different ONN structures, OplixNet effectively reduces the size of ONNs while maintaining accuracy. Experimental results demonstrate a 75.03% reduction in area with only a 0.33% decrease in accuracy for FCNN, and a 74.88% reduction in area with a 2.38% decrease in accuracy for ResNet-32, compared to traditional ONNs that only focus on modulating light amplitudes."
        ],
        [
            "OplixNet has introduced a novel technique for compressing ONNs by utilizing the amplitude and phase of light signals to adjust input data. This innovative method leads to quicker processing, enhanced efficiency, and reduced energy consumption for deep learning tasks. Through optimizing the input and output components of ONNs to incorporate amplitude and phase data, as well as encouraging knowledge exchange among various ONN structures, OplixNet effectively shrinks the size of ONNs while upholding accuracy. Experimental findings reveal a 75.03% decrease in area with only a 0.33% drop in accuracy for FCNN, and a 74.88% decrease in area with a 2.38% drop in accuracy for ResNet-32, in comparison to traditional ONNs that solely concentrate on modulating light amplitudes."
        ],
        [
            "OplixNet has developed a new method to compress ONNs by using the amplitude and phase of light signals to adjust input data. This innovative approach results in faster processing, improved efficiency, and lower energy consumption for deep learning tasks. By optimizing the input and output components of ONNs to include amplitude and phase data, as well as promoting knowledge sharing among different ONN structures, OplixNet effectively reduces the size of ONNs while maintaining accuracy. Experimental results demonstrate a 75.03% decrease in area with only a 0.33% decrease in accuracy for FCNN, and a 74.88% decrease in area with a 2.38% decrease in accuracy for ResNet-32, compared to traditional ONNs that focus solely on modulating light amplitudes."
        ],
        [
            "OplixNet has devised a novel technique for compressing ONNs through the manipulation of light signal amplitudes and phases to adjust input data. This innovative method leads to quicker processing, enhanced efficiency, and reduced energy consumption for deep learning operations. By optimizing the input and output elements of ONNs to integrate amplitude and phase information, as well as fostering knowledge exchange among different ONN structures, OplixNet effectively shrinks the size of ONNs while upholding accuracy. Experimental findings reveal a 75.03% reduction in area with only a 0.33% drop in accuracy for FCNN, and a 74.88% decrease in area with a 2.38% decrease in accuracy for ResNet-32, in comparison to conventional ONNs that exclusively concentrate on modulating light amplitudes."
        ],
        [
            "OplixNet has developed a new method to compress ONNs by adjusting light signal amplitudes and phases to manipulate input data. This innovative approach results in faster processing, improved efficiency, and lower energy consumption for deep learning tasks. Through optimizing input and output components of ONNs to incorporate amplitude and phase details, as well as promoting knowledge sharing among various ONN structures, OplixNet effectively reduces the size of ONNs while maintaining accuracy. Experimental results show a 75.03% decrease in area with only a 0.33% accuracy decrease for FCNN, and a 74.88% area reduction with a 2.38% accuracy drop for ResNet-32, compared to traditional ONNs that focus solely on adjusting light amplitudes."
        ],
        [
            "OplixNet has devised a novel method for compressing ONNs by manipulating the amplitudes and phases of light signals to control input data. This innovative technique leads to quicker processing, enhanced efficiency, and reduced energy consumption for deep learning tasks. By optimizing the input and output elements of ONNs to include amplitude and phase specifics, as well as encouraging information exchange among different ONN structures, OplixNet effectively shrinks the size of ONNs while preserving accuracy. Experimental findings demonstrate a 75.03% decrease in area with only a 0.33% accuracy decline for FCNN, and a 74.88% reduction in area with a 2.38% accuracy decrease for ResNet-32, in comparison to traditional ONNs that solely adjust light amplitudes."
        ],
        [
            "OplixNet has developed an innovative technique to compress ONNs by adjusting the amplitudes and phases of light signals to manage input data. This method results in faster processing, improved efficiency, and lower energy consumption for deep learning tasks. By optimizing the input and output components of ONNs to incorporate amplitude and phase details, as well as promoting information exchange between different ONN structures, OplixNet effectively reduces the size of ONNs while maintaining accuracy. Experimental results show a 75.03% reduction in area with only a 0.33% accuracy decrease for FCNN, and a 74.88% decrease in area with a 2.38% accuracy decline for ResNet-32, compared to traditional ONNs that only modify light amplitudes."
        ],
        [
            "OplixNet has devised a novel method for compressing ONNs by adjusting the amplitudes and phases of light signals to handle input data. This approach leads to quicker processing, enhanced efficiency, and reduced energy consumption for deep learning tasks. Through optimizing the input and output elements of ONNs to integrate amplitude and phase details, as well as facilitating information exchange between different ONN structures, OplixNet effectively reduces the size of ONNs while preserving accuracy. Experimental findings demonstrate a 75.03% decrease in area with only a 0.33% accuracy drop for FCNN, and a 74.88% area reduction with a 2.38% accuracy decrease for ResNet-32, in comparison to traditional ONNs that solely adjust light amplitudes."
        ],
        [
            "OplixNet has developed a new technique for compressing ONNs by manipulating the amplitudes and phases of light signals to process input data. This method results in faster processing, improved efficiency, and lower energy consumption for deep learning tasks. By optimizing the input and output components of ONNs to incorporate both amplitude and phase information, as well as enabling data exchange between different ONN structures, OplixNet effectively reduces the size of ONNs while maintaining accuracy. Experimental results show a 75.03% decrease in area with only a 0.33% decrease in accuracy for FCNN, and a 74.88% reduction in area with a 2.38% drop in accuracy for ResNet-32, compared to traditional ONNs that only adjust light amplitudes."
        ],
        [
            "OplixNet has devised a novel method for compressing ONNs by manipulating the amplitudes and phases of light signals to process input data. This approach leads to quicker processing, enhanced efficiency, and reduced energy consumption in deep learning tasks. Through optimizing the input and output components of ONNs to include both amplitude and phase information, as well as facilitating data exchange between different ONN structures, OplixNet effectively shrinks the size of ONNs while upholding accuracy. Experimental findings demonstrate a 75.03% decrease in area with only a 0.33% decrease in accuracy for FCNN, and a 74.88% reduction in area with a 2.38% drop in accuracy for ResNet-32, in comparison to traditional ONNs that solely adjust light amplitudes."
        ],
        [
            "OplixNet has come up with an innovative technique to compress ONNs by manipulating the amplitudes and phases of light signals for processing input data. This method results in faster processing, improved efficiency, and lower energy consumption in deep learning tasks. By optimizing the input and output components of ONNs to incorporate both amplitude and phase information, as well as enabling data exchange between different ONN structures, OplixNet effectively reduces the size of ONNs while maintaining accuracy. Experimental results show a 75.03% decrease in area with only a 0.33% decrease in accuracy for FCNN, and a 74.88% reduction in area with a 2.38% drop in accuracy for ResNet-32, compared to traditional ONNs that only adjust light amplitudes."
        ],
        [
            "OplixNet has developed an innovative method for compressing ONNs by manipulating light signal amplitudes and phases to process input data. This approach leads to quicker processing, enhanced efficiency, and reduced energy consumption in deep learning tasks. By optimizing ONN components to include both amplitude and phase data, as well as facilitating data exchange between different ONN structures, OplixNet effectively shrinks ONNs' size while maintaining accuracy. Experimental findings demonstrate a 75.03% decrease in area with just a 0.33% accuracy reduction for FCNN, and a 74.88% area reduction with a 2.38% accuracy decrease for ResNet-32, compared to traditional ONNs that solely adjust light amplitudes."
        ],
        [
            "OplixNet has devised a novel technique for compressing ONNs through the manipulation of light signal amplitudes and phases to process input data. This method results in faster processing, improved efficiency, and decreased energy consumption in deep learning tasks. By optimizing ONN components to incorporate both amplitude and phase data, as well as facilitating data exchange among different ONN structures, OplixNet effectively reduces the size of ONNs while maintaining accuracy. Experimental results show a 75.03% decrease in area with only a 0.33% accuracy reduction for FCNN, and a 74.88% decrease in area with a 2.38% accuracy decrease for ResNet-32, in comparison to traditional ONNs that only adjust light amplitudes."
        ],
        [
            "OplixNet has developed an innovative method to compress ONNs by manipulating light signal amplitudes and phases for processing input data. This approach leads to quicker processing, enhanced efficiency, and reduced energy usage in deep learning tasks. Through optimizing ONN components to include both amplitude and phase data and enabling data exchange between different ONN structures, OplixNet effectively shrinks the size of ONNs while preserving accuracy. Experimental findings demonstrate a 75.03% reduction in area with just a 0.33% accuracy drop for FCNN, and a 74.88% decrease in area with a 2.38% accuracy decrease for ResNet-32, compared to conventional ONNs that solely adjust light amplitudes."
        ],
        [
            "OplixNet has created a new way to compress ONNs by controlling the amplitude and phase of light signals for processing input data. This method results in faster processing, improved efficiency, and lower energy consumption in deep learning tasks. By optimizing ONN components to incorporate both amplitude and phase information and enabling data exchange between different ONN structures, OplixNet effectively reduces the size of ONNs while maintaining accuracy. Experimental results show a 75.03% reduction in area with only a 0.33% decrease in accuracy for FCNN, and a 74.88% decrease in area with a 2.38% decrease in accuracy for ResNet-32, compared to traditional ONNs that only adjust light amplitudes."
        ],
        [
            "OplixNet has developed a novel approach to compress ONNs by manipulating the amplitude and phase of light signals to process input data. This technique leads to quicker processing, enhanced efficiency, and reduced energy consumption in deep learning assignments. Through optimizing ONN components to include both amplitude and phase details and facilitating data exchange among different ONN structures, OplixNet effectively shrinks the size of ONNs while upholding accuracy. Experimental findings demonstrate a 75.03% decrease in area with just a 0.33% dip in accuracy for FCNN, and a 74.88% reduction in area with a 2.38% decrease in accuracy for ResNet-32, in comparison to conventional ONNs that solely adjust light amplitudes."
        ],
        [
            "OplixNet has innovatively compressed ONNs by manipulating the amplitude and phase of light signals for processing input data, resulting in faster processing, improved efficiency, and lower energy consumption in deep learning tasks. By optimizing ONN components to incorporate amplitude and phase details and enabling data exchange among different ONN structures, OplixNet effectively reduces the size of ONNs while maintaining accuracy. Experimental results show a 75.03% decrease in area with only a 0.33% accuracy drop for FCNN, and a 74.88% area reduction with a 2.38% accuracy decrease for ResNet-32, compared to traditional ONNs that adjust light amplitudes only."
        ],
        [
            "OplixNet has creatively compressed ONNs by adjusting the amplitude and phase of light signals to process input data, leading to faster processing, enhanced efficiency, and reduced energy consumption in deep learning tasks. Through optimizing ONN components to include amplitude and phase information and facilitating data exchange between different ONN structures, OplixNet effectively shrinks the size of ONNs while maintaining accuracy. Experimental findings demonstrate a 75.03% decrease in area with just a 0.33% accuracy decline for FCNN, and a 74.88% reduction in area with a 2.38% accuracy drop for ResNet-32, in comparison to traditional ONNs that only adjust light amplitudes."
        ],
        [
            "OplixNet has innovatively compressed ONNs by manipulating the amplitude and phase of light signals for processing input data. This results in faster processing, improved efficiency, and lower energy consumption in deep learning tasks. By optimizing ONN components to incorporate amplitude and phase details and enabling data exchange between different ONN structures, OplixNet effectively reduces the size of ONNs while preserving accuracy. Experimental results show a 75.03% decrease in area with just a 0.33% accuracy decline for FCNN, and a 74.88% area reduction with a 2.38% accuracy drop for ResNet-32, compared to traditional ONNs that only adjust light amplitudes."
        ],
        [
            "OplixNet has efficiently shrunk ONNs by manipulating light signal amplitudes and phases to process input data. This leads to quicker processing, enhanced efficiency, and reduced energy consumption in deep learning tasks. By optimizing ONN components to include amplitude and phase details and facilitating data exchange between various ONN structures, OplixNet effectively minimizes the size of ONNs while maintaining accuracy. Experimental findings reveal a 75.03% decrease in area with just a 0.33% accuracy decline for FCNN, and a 74.88% reduction in area with a 2.38% accuracy drop for ResNet-32, compared to conventional ONNs that only adjust light amplitudes."
        ],
        [
            "OplixNet efficiently reduces the size of ONNs by manipulating light signal amplitudes and phases to process input data, resulting in faster processing, improved efficiency, and lower energy consumption in deep learning tasks. By optimizing ONN components to include amplitude and phase details and enabling data exchange between different ONN structures, OplixNet effectively decreases the size of ONNs while maintaining accuracy. Experimental results show a 75.03% decrease in area with only a 0.33% accuracy decrease for FCNN, and a 74.88% area reduction with a 2.38% accuracy drop for ResNet-32, compared to traditional ONNs that only adjust light amplitudes."
        ],
        [
            "OplixNet efficiently reduces the size of ONNs by adjusting light signal amplitudes and phases to process input data, leading to quicker processing, enhanced efficiency, and decreased energy consumption in deep learning tasks. By optimizing ONN components to incorporate amplitude and phase details and facilitating data exchange between different ONN structures, OplixNet effectively shrinks the size of ONNs while retaining accuracy. Experimental findings demonstrate a 75.03% decrease in area with just a 0.33% accuracy reduction for FCNN, as well as a 74.88% area reduction with a 2.38% accuracy decline for ResNet-32, compared to conventional ONNs that solely modify light amplitudes."
        ],
        [
            "OplixNet efficiently reduces the size of ONNs by adjusting light signal amplitudes and phases to process input data, resulting in faster processing, improved efficiency, and reduced energy consumption in deep learning tasks. Through optimizing ONN components to include amplitude and phase details and enabling data exchange between different ONN structures, OplixNet effectively decreases the size of ONNs while maintaining accuracy. Experimental results show a 75.03% reduction in area with only a 0.33% decrease in accuracy for FCNN, and a 74.88% decrease in area with a 2.38% decline in accuracy for ResNet-32, compared to traditional ONNs that only adjust light amplitudes."
        ],
        [
            "OplixNet reduces the size of ONNs by adjusting light signal amplitudes and phases to process input data, leading to faster processing, improved efficiency, and reduced energy consumption in deep learning tasks. By optimizing ONN components to include amplitude and phase details and facilitating data exchange between different ONN structures, OplixNet effectively decreases the size of ONNs while maintaining accuracy. Experimental results indicate a 75.03% reduction in area with only a 0.33% decrease in accuracy for FCNN, and a 74.88% decrease in area with a 2.38% decline in accuracy for ResNet-32, compared to traditional ONNs that solely adjust light amplitudes."
        ],
        [
            "OplixNet reduces the size of ONNs by adjusting light signal amplitudes and phases for faster processing, improved efficiency, and reduced energy consumption in deep learning tasks. By optimizing ONN components with amplitude and phase details and enabling data exchange between different ONN structures, OplixNet effectively decreases ONN size while maintaining accuracy. Experimental results show a 75.03% reduction in area with only a 0.33% decrease in accuracy for FCNN, and a 74.88% decrease in area with a 2.38% decline in accuracy for ResNet-32, compared to traditional ONNs that only adjust light amplitudes."
        ],
        [
            "OplixNet optimizes ONN components by adjusting light signal amplitudes and phases to achieve faster processing, improved efficiency, and reduced energy consumption in deep learning tasks. This approach also enables data exchange between different ONN structures, effectively reducing the size of ONNs while maintaining accuracy. Experimental findings demonstrate a significant reduction in area - 75.03% for FCNN and 74.88% for ResNet-32 - with minimal decreases in accuracy compared to traditional ONNs that adjust only light amplitudes."
        ],
        [
            "OplixNet improves the performance of ONN components by modifying the amplitudes and phases of light signals, resulting in faster processing, increased efficiency, and lower energy usage in deep learning applications. This technique also allows for data transfer between various ONN structures, effectively shrinking the size of ONNs without compromising accuracy. Experiments show a substantial decrease in area - 75.03% for FCNN and 74.88% for ResNet-32 - with minimal accuracy loss compared to conventional ONNs that only adjust light amplitudes."
        ],
        [
            "OplixNet enhances ONN component performance by adjusting light signal amplitudes and phases, leading to quicker processing, improved efficiency, and reduced energy consumption in deep learning tasks. It enables data transfer among different ONN structures, effectively reducing ONN size without sacrificing accuracy. Experiments demonstrate a significant decrease in area - 75.03% for FCNN and 74.88% for ResNet-32 - with minimal accuracy decline compared to traditional ONNs that solely modify light amplitudes."
        ],
        [
            "OplixNet boosts the performance of the ONN component by adjusting the amplitudes and phases of light signals, resulting in faster processing, increased efficiency, and lower energy usage in deep learning tasks. It facilitates data transfer between various ONN structures, effectively decreasing the size of ONNs without compromising accuracy. Experiments show a substantial reduction in area - 75.03% for FCNN and 74.88% for ResNet-32 - with minimal decrease in accuracy compared to traditional ONNs that only adjust light amplitudes."
        ],
        [
            "OplixNet enhances the ONN component's performance by modifying light signal amplitudes and phases, leading to quicker processing, improved efficiency, and reduced energy consumption in deep learning activities. It simplifies data exchange between different ONN structures, reducing the size of ONNs without sacrificing accuracy. Studies demonstrate a significant decrease in area - 75.03% for FCNN and 74.88% for ResNet-32 - with minimal impact on accuracy compared to conventional ONNs that solely adjust light amplitudes."
        ],
        [
            "OplixNet improves the performance of the ONN component by adjusting light signal amplitudes and phases, resulting in faster processing, increased efficiency, and lower energy consumption during deep learning tasks. It streamlines data transfer between various ONN structures, decreasing the size of ONNs without compromising accuracy. Research shows a notable reduction in area - 75.03% for FCNN and 74.88% for ResNet-32 - with minimal effect on accuracy compared to traditional ONNs that only modify light amplitudes."
        ],
        [
            "OplixNet enhances the ONN component's performance by modifying light signal amplitudes and phases, leading to quicker processing, improved efficiency, and reduced energy usage in deep learning activities. It facilitates data transfer among different ONN structures, reducing the size of ONNs without sacrificing accuracy. Studies demonstrate a significant decrease in area - 75.03% for FCNN and 74.88% for ResNet-32 - with minimal impact on accuracy compared to conventional ONNs that solely adjust light amplitudes."
        ],
        [
            "OplixNet improves the performance of the ONN component by adjusting light signal amplitudes and phases, resulting in faster processing, increased efficiency, and decreased energy consumption in deep learning tasks. It enables data transfer between various ONN structures, reducing the size of ONNs without compromising accuracy. Research shows a notable reduction in area - 75.03% for FCNN and 74.88% for ResNet-32 - with minimal loss in accuracy compared to traditional ONNs that only modify light amplitudes."
        ],
        [
            "OplixNet enhances the ONN component's performance by modifying light signal amplitudes and phases, leading to quicker processing, improved efficiency, and reduced energy usage in deep learning activities. It facilitates data exchange among different ONN configurations, decreasing the size of ONNs without sacrificing precision. Studies indicate a significant decrease in area - 75.03% for FCNN and 74.88% for ResNet-32 - with minimal accuracy loss compared to conventional ONNs that solely adjust light amplitudes."
        ],
        [
            "OplixNet boosts the performance of the ONN component by adjusting light signal amplitudes and phases, resulting in faster processing, enhanced efficiency, and lower energy consumption in deep learning tasks. It enables the exchange of data between various ONN setups, reducing the size of ONNs without compromising accuracy. Research shows a substantial decrease in footprint - 75.03% for FCNN and 74.88% for ResNet-32 - with minimal loss in accuracy compared to traditional ONNs that only tweak light amplitudes."
        ]
    ]
}