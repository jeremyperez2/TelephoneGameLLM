{
    "adjacency_matrix": [
        [
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0,
            0.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            1.0
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0
        ]
    ],
    "prompt_init": [
        "You will receive a text. Your task is to rephrase this text without modifying its meaning. Just output your new text, nothing else. Here is the text:"
    ],
    "prompt_update": [
        "You will receive a text. Your task is to rephrase this text without modifying its meaning. Just output your new text, nothing else. Here is the text:"
    ],
    "personality_list": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
    ],
    "format_prompt": [
        ""
    ],
    "initial_story": "having the potential for high speed, high throughput, and low energy cost,optical neural networks (onns) have emerged as a promising candidate foraccelerating deep learning tasks. in conventional onns, light amplitudes aremodulated at the input and detected at the output. however, the light phasesare still ignored in conventional structures, although they can also carryinformation for computing. to address this issue, in this paper, we propose aframework called oplixnet to compress the areas of onns by modulating inputimage data into the amplitudes and phase parts of light signals. the input andoutput parts of the onns are redesigned to make full use of both amplitude andphase information. moreover, mutual learning across different onn structures isintroduced to maintain the accuracy. experimental results demonstrate that theproposed framework significantly reduces the areas of onns with the accuracywithin an acceptable range. for instance, 75.03% area is reduced with a 0.33%accuracy decrease on fully connected neural network (fcnn) and 74.88% area isreduced with a 2.38% accuracy decrease on resnet-32. ",
    "stories": [
        [
            "Optical neural networks (ONNs) have gained attention due to their potential for high-speed processing, high throughput, and low energy consumption. In traditional ONNs, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite carrying valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses ONNs by separating input image data into amplitude and phase components of light signals. The input and output parts of the ONNs are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different ONN structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces ONN areas while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks (FCNN) and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained traction due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Additionally, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results show that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ],
        [
            "Here is the rephrased text:\n\nOptical neural networks have gained popularity due to their potential for rapid processing, high throughput, and low energy consumption. In traditional optical neural networks, light amplitudes are modulated at the input and detected at the output, but the light phases are currently overlooked, despite containing valuable information for computation. To address this limitation, we introduce OplixNet, a framework that compresses optical neural networks by separating input image data into amplitude and phase components of light signals. The input and output parts of the optical neural networks are redesigned to utilize both amplitude and phase information. Furthermore, mutual learning across different optical neural network structures is employed to maintain accuracy. Experimental results demonstrate that OplixNet significantly reduces the area of optical neural networks while maintaining acceptable accuracy, with reductions of 75.03% and 74.88% for fully connected neural networks and ResNet-32, respectively, with accuracy decreases of 0.33% and 2.38%."
        ]
    ]
}